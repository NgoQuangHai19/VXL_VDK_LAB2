
EX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d60  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002e6c  08002e6c  00012e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e90  08002e90  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08002e90  08002e90  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e90  08002e90  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e90  08002e90  00012e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e94  08002e94  00012e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08002e98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000038  08002ed0  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002ed0  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008804  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001580  00000000  00000000  00028865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  00029de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e8  00000000  00000000  0002a778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162f9  00000000  00000000  0002b060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000984c  00000000  00000000  00041359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082181  00000000  00000000  0004aba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ccd26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000278c  00000000  00000000  000ccd7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000038 	.word	0x20000038
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e54 	.word	0x08002e54

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000003c 	.word	0x2000003c
 8000148:	08002e54 	.word	0x08002e54

0800014c <setTimer0>:
int timer2_flag = 0;
int timer3_counter = 0;
int timer3_flag = 0;
int TIMER_CYCLE	= 10;

void setTimer0(int duration){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	timer0_counter = duration  / TIMER_CYCLE;
 8000154:	4b07      	ldr	r3, [pc, #28]	; (8000174 <setTimer0+0x28>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	687a      	ldr	r2, [r7, #4]
 800015a:	fb92 f3f3 	sdiv	r3, r2, r3
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <setTimer0+0x2c>)
 8000160:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8000162:	4b06      	ldr	r3, [pc, #24]	; (800017c <setTimer0+0x30>)
 8000164:	2200      	movs	r2, #0
 8000166:	601a      	str	r2, [r3, #0]
}
 8000168:	bf00      	nop
 800016a:	370c      	adds	r7, #12
 800016c:	46bd      	mov	sp, r7
 800016e:	bc80      	pop	{r7}
 8000170:	4770      	bx	lr
 8000172:	bf00      	nop
 8000174:	2000000c 	.word	0x2000000c
 8000178:	20000054 	.word	0x20000054
 800017c:	20000058 	.word	0x20000058

08000180 <setTimer1>:
void setTimer1(int duration){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	timer1_counter = duration  / TIMER_CYCLE;
 8000188:	4b07      	ldr	r3, [pc, #28]	; (80001a8 <setTimer1+0x28>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	687a      	ldr	r2, [r7, #4]
 800018e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000192:	4a06      	ldr	r2, [pc, #24]	; (80001ac <setTimer1+0x2c>)
 8000194:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000196:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <setTimer1+0x30>)
 8000198:	2200      	movs	r2, #0
 800019a:	601a      	str	r2, [r3, #0]
}
 800019c:	bf00      	nop
 800019e:	370c      	adds	r7, #12
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr
 80001a6:	bf00      	nop
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	2000005c 	.word	0x2000005c
 80001b0:	20000060 	.word	0x20000060

080001b4 <setTimer2>:
void setTimer2(int duration){
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
	timer2_counter = duration  / TIMER_CYCLE;
 80001bc:	4b07      	ldr	r3, [pc, #28]	; (80001dc <setTimer2+0x28>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	687a      	ldr	r2, [r7, #4]
 80001c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80001c6:	4a06      	ldr	r2, [pc, #24]	; (80001e0 <setTimer2+0x2c>)
 80001c8:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80001ca:	4b06      	ldr	r3, [pc, #24]	; (80001e4 <setTimer2+0x30>)
 80001cc:	2200      	movs	r2, #0
 80001ce:	601a      	str	r2, [r3, #0]
}
 80001d0:	bf00      	nop
 80001d2:	370c      	adds	r7, #12
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	20000064 	.word	0x20000064
 80001e4:	20000068 	.word	0x20000068

080001e8 <setTimer3>:
void setTimer3(int duration){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	timer3_counter = duration  / TIMER_CYCLE;
 80001f0:	4b07      	ldr	r3, [pc, #28]	; (8000210 <setTimer3+0x28>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	687a      	ldr	r2, [r7, #4]
 80001f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80001fa:	4a06      	ldr	r2, [pc, #24]	; (8000214 <setTimer3+0x2c>)
 80001fc:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80001fe:	4b06      	ldr	r3, [pc, #24]	; (8000218 <setTimer3+0x30>)
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	2000000c 	.word	0x2000000c
 8000214:	2000006c 	.word	0x2000006c
 8000218:	20000070 	.word	0x20000070

0800021c <timerRun>:
void timerRun(){
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	if(timer0_counter > 0){
 8000220:	4b21      	ldr	r3, [pc, #132]	; (80002a8 <timerRun+0x8c>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	2b00      	cmp	r3, #0
 8000226:	dd0b      	ble.n	8000240 <timerRun+0x24>
		timer0_counter--;
 8000228:	4b1f      	ldr	r3, [pc, #124]	; (80002a8 <timerRun+0x8c>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	3b01      	subs	r3, #1
 800022e:	4a1e      	ldr	r2, [pc, #120]	; (80002a8 <timerRun+0x8c>)
 8000230:	6013      	str	r3, [r2, #0]
		if(timer0_counter == 0) timer0_flag = 1;
 8000232:	4b1d      	ldr	r3, [pc, #116]	; (80002a8 <timerRun+0x8c>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d102      	bne.n	8000240 <timerRun+0x24>
 800023a:	4b1c      	ldr	r3, [pc, #112]	; (80002ac <timerRun+0x90>)
 800023c:	2201      	movs	r2, #1
 800023e:	601a      	str	r2, [r3, #0]
	}
	if(timer1_counter > 0){
 8000240:	4b1b      	ldr	r3, [pc, #108]	; (80002b0 <timerRun+0x94>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	2b00      	cmp	r3, #0
 8000246:	dd0b      	ble.n	8000260 <timerRun+0x44>
		timer1_counter--;
 8000248:	4b19      	ldr	r3, [pc, #100]	; (80002b0 <timerRun+0x94>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	3b01      	subs	r3, #1
 800024e:	4a18      	ldr	r2, [pc, #96]	; (80002b0 <timerRun+0x94>)
 8000250:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) timer1_flag = 1;
 8000252:	4b17      	ldr	r3, [pc, #92]	; (80002b0 <timerRun+0x94>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d102      	bne.n	8000260 <timerRun+0x44>
 800025a:	4b16      	ldr	r3, [pc, #88]	; (80002b4 <timerRun+0x98>)
 800025c:	2201      	movs	r2, #1
 800025e:	601a      	str	r2, [r3, #0]
	}
	if(timer2_counter > 0){
 8000260:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <timerRun+0x9c>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	2b00      	cmp	r3, #0
 8000266:	dd0b      	ble.n	8000280 <timerRun+0x64>
		timer2_counter--;
 8000268:	4b13      	ldr	r3, [pc, #76]	; (80002b8 <timerRun+0x9c>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	3b01      	subs	r3, #1
 800026e:	4a12      	ldr	r2, [pc, #72]	; (80002b8 <timerRun+0x9c>)
 8000270:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0) timer2_flag = 1;
 8000272:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <timerRun+0x9c>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d102      	bne.n	8000280 <timerRun+0x64>
 800027a:	4b10      	ldr	r3, [pc, #64]	; (80002bc <timerRun+0xa0>)
 800027c:	2201      	movs	r2, #1
 800027e:	601a      	str	r2, [r3, #0]
	}
	if(timer3_counter > 0){
 8000280:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <timerRun+0xa4>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	dd0b      	ble.n	80002a0 <timerRun+0x84>
		timer3_counter--;
 8000288:	4b0d      	ldr	r3, [pc, #52]	; (80002c0 <timerRun+0xa4>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	3b01      	subs	r3, #1
 800028e:	4a0c      	ldr	r2, [pc, #48]	; (80002c0 <timerRun+0xa4>)
 8000290:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0) timer3_flag = 1;
 8000292:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <timerRun+0xa4>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d102      	bne.n	80002a0 <timerRun+0x84>
 800029a:	4b0a      	ldr	r3, [pc, #40]	; (80002c4 <timerRun+0xa8>)
 800029c:	2201      	movs	r2, #1
 800029e:	601a      	str	r2, [r3, #0]
	}
}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	20000054 	.word	0x20000054
 80002ac:	20000058 	.word	0x20000058
 80002b0:	2000005c 	.word	0x2000005c
 80002b4:	20000060 	.word	0x20000060
 80002b8:	20000064 	.word	0x20000064
 80002bc:	20000068 	.word	0x20000068
 80002c0:	2000006c 	.word	0x2000006c
 80002c4:	20000070 	.word	0x20000070

080002c8 <display>:

void display(GPIO_PinState a, GPIO_PinState b, GPIO_PinState c,
		GPIO_PinState d, GPIO_PinState e, GPIO_PinState f,GPIO_PinState g) {
 80002c8:	b590      	push	{r4, r7, lr}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4604      	mov	r4, r0
 80002d0:	4608      	mov	r0, r1
 80002d2:	4611      	mov	r1, r2
 80002d4:	461a      	mov	r2, r3
 80002d6:	4623      	mov	r3, r4
 80002d8:	71fb      	strb	r3, [r7, #7]
 80002da:	4603      	mov	r3, r0
 80002dc:	71bb      	strb	r3, [r7, #6]
 80002de:	460b      	mov	r3, r1
 80002e0:	717b      	strb	r3, [r7, #5]
 80002e2:	4613      	mov	r3, r2
 80002e4:	713b      	strb	r3, [r7, #4]
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, a);
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	461a      	mov	r2, r3
 80002ea:	2101      	movs	r1, #1
 80002ec:	4815      	ldr	r0, [pc, #84]	; (8000344 <display+0x7c>)
 80002ee:	f001 fd8f 	bl	8001e10 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, b);
 80002f2:	79bb      	ldrb	r3, [r7, #6]
 80002f4:	461a      	mov	r2, r3
 80002f6:	2102      	movs	r1, #2
 80002f8:	4812      	ldr	r0, [pc, #72]	; (8000344 <display+0x7c>)
 80002fa:	f001 fd89 	bl	8001e10 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, c);
 80002fe:	797b      	ldrb	r3, [r7, #5]
 8000300:	461a      	mov	r2, r3
 8000302:	2104      	movs	r1, #4
 8000304:	480f      	ldr	r0, [pc, #60]	; (8000344 <display+0x7c>)
 8000306:	f001 fd83 	bl	8001e10 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, d);
 800030a:	793b      	ldrb	r3, [r7, #4]
 800030c:	461a      	mov	r2, r3
 800030e:	2108      	movs	r1, #8
 8000310:	480c      	ldr	r0, [pc, #48]	; (8000344 <display+0x7c>)
 8000312:	f001 fd7d 	bl	8001e10 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, e);
 8000316:	7e3b      	ldrb	r3, [r7, #24]
 8000318:	461a      	mov	r2, r3
 800031a:	2110      	movs	r1, #16
 800031c:	4809      	ldr	r0, [pc, #36]	; (8000344 <display+0x7c>)
 800031e:	f001 fd77 	bl	8001e10 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, f);
 8000322:	7f3b      	ldrb	r3, [r7, #28]
 8000324:	461a      	mov	r2, r3
 8000326:	2120      	movs	r1, #32
 8000328:	4806      	ldr	r0, [pc, #24]	; (8000344 <display+0x7c>)
 800032a:	f001 fd71 	bl	8001e10 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, g);
 800032e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000332:	461a      	mov	r2, r3
 8000334:	2140      	movs	r1, #64	; 0x40
 8000336:	4803      	ldr	r0, [pc, #12]	; (8000344 <display+0x7c>)
 8000338:	f001 fd6a 	bl	8001e10 <HAL_GPIO_WritePin>
  }
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	bd90      	pop	{r4, r7, pc}
 8000344:	40010c00 	.word	0x40010c00

08000348 <display7SEG>:

void display7SEG(int state){
 8000348:	b580      	push	{r7, lr}
 800034a:	b086      	sub	sp, #24
 800034c:	af04      	add	r7, sp, #16
 800034e:	6078      	str	r0, [r7, #4]
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	2b09      	cmp	r3, #9
 8000354:	f200 809a 	bhi.w	800048c <display7SEG+0x144>
 8000358:	a201      	add	r2, pc, #4	; (adr r2, 8000360 <display7SEG+0x18>)
 800035a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800035e:	bf00      	nop
 8000360:	08000389 	.word	0x08000389
 8000364:	080003a3 	.word	0x080003a3
 8000368:	080003bd 	.word	0x080003bd
 800036c:	080003d7 	.word	0x080003d7
 8000370:	080003f1 	.word	0x080003f1
 8000374:	0800040b 	.word	0x0800040b
 8000378:	08000425 	.word	0x08000425
 800037c:	0800043f 	.word	0x0800043f
 8000380:	08000459 	.word	0x08000459
 8000384:	08000473 	.word	0x08000473
    switch (state) {
        case 0:
            display(0, 0, 0, 0, 0, 0, 1);
 8000388:	2301      	movs	r3, #1
 800038a:	9302      	str	r3, [sp, #8]
 800038c:	2300      	movs	r3, #0
 800038e:	9301      	str	r3, [sp, #4]
 8000390:	2300      	movs	r3, #0
 8000392:	9300      	str	r3, [sp, #0]
 8000394:	2300      	movs	r3, #0
 8000396:	2200      	movs	r2, #0
 8000398:	2100      	movs	r1, #0
 800039a:	2000      	movs	r0, #0
 800039c:	f7ff ff94 	bl	80002c8 <display>
            break;
 80003a0:	e081      	b.n	80004a6 <display7SEG+0x15e>
        case 1:
            display(1, 0, 0, 1, 1, 1, 1);
 80003a2:	2301      	movs	r3, #1
 80003a4:	9302      	str	r3, [sp, #8]
 80003a6:	2301      	movs	r3, #1
 80003a8:	9301      	str	r3, [sp, #4]
 80003aa:	2301      	movs	r3, #1
 80003ac:	9300      	str	r3, [sp, #0]
 80003ae:	2301      	movs	r3, #1
 80003b0:	2200      	movs	r2, #0
 80003b2:	2100      	movs	r1, #0
 80003b4:	2001      	movs	r0, #1
 80003b6:	f7ff ff87 	bl	80002c8 <display>
            break;
 80003ba:	e074      	b.n	80004a6 <display7SEG+0x15e>
        case 2:
            display(0, 0, 1, 0, 0, 1, 0);
 80003bc:	2300      	movs	r3, #0
 80003be:	9302      	str	r3, [sp, #8]
 80003c0:	2301      	movs	r3, #1
 80003c2:	9301      	str	r3, [sp, #4]
 80003c4:	2300      	movs	r3, #0
 80003c6:	9300      	str	r3, [sp, #0]
 80003c8:	2300      	movs	r3, #0
 80003ca:	2201      	movs	r2, #1
 80003cc:	2100      	movs	r1, #0
 80003ce:	2000      	movs	r0, #0
 80003d0:	f7ff ff7a 	bl	80002c8 <display>
            break;
 80003d4:	e067      	b.n	80004a6 <display7SEG+0x15e>
        case 3:
            display(0, 0, 0, 0, 1, 1, 0);
 80003d6:	2300      	movs	r3, #0
 80003d8:	9302      	str	r3, [sp, #8]
 80003da:	2301      	movs	r3, #1
 80003dc:	9301      	str	r3, [sp, #4]
 80003de:	2301      	movs	r3, #1
 80003e0:	9300      	str	r3, [sp, #0]
 80003e2:	2300      	movs	r3, #0
 80003e4:	2200      	movs	r2, #0
 80003e6:	2100      	movs	r1, #0
 80003e8:	2000      	movs	r0, #0
 80003ea:	f7ff ff6d 	bl	80002c8 <display>
            break;
 80003ee:	e05a      	b.n	80004a6 <display7SEG+0x15e>
        case 4:
            display(1, 0, 0, 1, 1, 0, 0);
 80003f0:	2300      	movs	r3, #0
 80003f2:	9302      	str	r3, [sp, #8]
 80003f4:	2300      	movs	r3, #0
 80003f6:	9301      	str	r3, [sp, #4]
 80003f8:	2301      	movs	r3, #1
 80003fa:	9300      	str	r3, [sp, #0]
 80003fc:	2301      	movs	r3, #1
 80003fe:	2200      	movs	r2, #0
 8000400:	2100      	movs	r1, #0
 8000402:	2001      	movs	r0, #1
 8000404:	f7ff ff60 	bl	80002c8 <display>
            break;
 8000408:	e04d      	b.n	80004a6 <display7SEG+0x15e>
        case 5:
            display(0, 1, 0, 0, 1, 0, 0);
 800040a:	2300      	movs	r3, #0
 800040c:	9302      	str	r3, [sp, #8]
 800040e:	2300      	movs	r3, #0
 8000410:	9301      	str	r3, [sp, #4]
 8000412:	2301      	movs	r3, #1
 8000414:	9300      	str	r3, [sp, #0]
 8000416:	2300      	movs	r3, #0
 8000418:	2200      	movs	r2, #0
 800041a:	2101      	movs	r1, #1
 800041c:	2000      	movs	r0, #0
 800041e:	f7ff ff53 	bl	80002c8 <display>
            break;
 8000422:	e040      	b.n	80004a6 <display7SEG+0x15e>
        case 6:
            display(0, 1, 0, 0, 0, 0, 0);
 8000424:	2300      	movs	r3, #0
 8000426:	9302      	str	r3, [sp, #8]
 8000428:	2300      	movs	r3, #0
 800042a:	9301      	str	r3, [sp, #4]
 800042c:	2300      	movs	r3, #0
 800042e:	9300      	str	r3, [sp, #0]
 8000430:	2300      	movs	r3, #0
 8000432:	2200      	movs	r2, #0
 8000434:	2101      	movs	r1, #1
 8000436:	2000      	movs	r0, #0
 8000438:	f7ff ff46 	bl	80002c8 <display>
            break;
 800043c:	e033      	b.n	80004a6 <display7SEG+0x15e>
        case 7:
            display(0, 0, 0, 1, 1, 1, 1);
 800043e:	2301      	movs	r3, #1
 8000440:	9302      	str	r3, [sp, #8]
 8000442:	2301      	movs	r3, #1
 8000444:	9301      	str	r3, [sp, #4]
 8000446:	2301      	movs	r3, #1
 8000448:	9300      	str	r3, [sp, #0]
 800044a:	2301      	movs	r3, #1
 800044c:	2200      	movs	r2, #0
 800044e:	2100      	movs	r1, #0
 8000450:	2000      	movs	r0, #0
 8000452:	f7ff ff39 	bl	80002c8 <display>
            break;
 8000456:	e026      	b.n	80004a6 <display7SEG+0x15e>
        case 8:
            display(0, 0, 0, 0, 0, 0, 0);
 8000458:	2300      	movs	r3, #0
 800045a:	9302      	str	r3, [sp, #8]
 800045c:	2300      	movs	r3, #0
 800045e:	9301      	str	r3, [sp, #4]
 8000460:	2300      	movs	r3, #0
 8000462:	9300      	str	r3, [sp, #0]
 8000464:	2300      	movs	r3, #0
 8000466:	2200      	movs	r2, #0
 8000468:	2100      	movs	r1, #0
 800046a:	2000      	movs	r0, #0
 800046c:	f7ff ff2c 	bl	80002c8 <display>
            break;
 8000470:	e019      	b.n	80004a6 <display7SEG+0x15e>
        case 9:
            display(0, 0, 0, 0, 1, 0, 0);
 8000472:	2300      	movs	r3, #0
 8000474:	9302      	str	r3, [sp, #8]
 8000476:	2300      	movs	r3, #0
 8000478:	9301      	str	r3, [sp, #4]
 800047a:	2301      	movs	r3, #1
 800047c:	9300      	str	r3, [sp, #0]
 800047e:	2300      	movs	r3, #0
 8000480:	2200      	movs	r2, #0
 8000482:	2100      	movs	r1, #0
 8000484:	2000      	movs	r0, #0
 8000486:	f7ff ff1f 	bl	80002c8 <display>
            break;
 800048a:	e00c      	b.n	80004a6 <display7SEG+0x15e>
        default:
            display(1, 1, 1, 1, 1, 1, 1);
 800048c:	2301      	movs	r3, #1
 800048e:	9302      	str	r3, [sp, #8]
 8000490:	2301      	movs	r3, #1
 8000492:	9301      	str	r3, [sp, #4]
 8000494:	2301      	movs	r3, #1
 8000496:	9300      	str	r3, [sp, #0]
 8000498:	2301      	movs	r3, #1
 800049a:	2201      	movs	r2, #1
 800049c:	2101      	movs	r1, #1
 800049e:	2001      	movs	r0, #1
 80004a0:	f7ff ff12 	bl	80002c8 <display>
        }
}
 80004a4:	bf00      	nop
 80004a6:	bf00      	nop
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop

080004b0 <update7SEG>:

const int MAX_LED = 4;
int index_led = 0;
int led_buffer [4] = {1 , 2 , 3 , 4};
void update7SEG ( int index ) {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2b03      	cmp	r3, #3
 80004bc:	f200 8084 	bhi.w	80005c8 <update7SEG+0x118>
 80004c0:	a201      	add	r2, pc, #4	; (adr r2, 80004c8 <update7SEG+0x18>)
 80004c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004c6:	bf00      	nop
 80004c8:	080004d9 	.word	0x080004d9
 80004cc:	08000515 	.word	0x08000515
 80004d0:	08000551 	.word	0x08000551
 80004d4:	0800058d 	.word	0x0800058d
    switch ( index ) {
        case 0:
            //Display the first 7 SEG with led_buffer [0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 80004d8:	2200      	movs	r2, #0
 80004da:	2140      	movs	r1, #64	; 0x40
 80004dc:	483d      	ldr	r0, [pc, #244]	; (80005d4 <update7SEG+0x124>)
 80004de:	f001 fc97 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 80004e2:	2201      	movs	r2, #1
 80004e4:	2180      	movs	r1, #128	; 0x80
 80004e6:	483b      	ldr	r0, [pc, #236]	; (80005d4 <update7SEG+0x124>)
 80004e8:	f001 fc92 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 80004ec:	2201      	movs	r2, #1
 80004ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004f2:	4838      	ldr	r0, [pc, #224]	; (80005d4 <update7SEG+0x124>)
 80004f4:	f001 fc8c 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 80004f8:	2201      	movs	r2, #1
 80004fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004fe:	4835      	ldr	r0, [pc, #212]	; (80005d4 <update7SEG+0x124>)
 8000500:	f001 fc86 	bl	8001e10 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[index]);
 8000504:	4a34      	ldr	r2, [pc, #208]	; (80005d8 <update7SEG+0x128>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff ff1b 	bl	8000348 <display7SEG>
            break ;
 8000512:	e05a      	b.n	80005ca <update7SEG+0x11a>
        case 1:
            // Display the second 7 SEG with led_buffer [1]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000514:	2201      	movs	r2, #1
 8000516:	2140      	movs	r1, #64	; 0x40
 8000518:	482e      	ldr	r0, [pc, #184]	; (80005d4 <update7SEG+0x124>)
 800051a:	f001 fc79 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	2180      	movs	r1, #128	; 0x80
 8000522:	482c      	ldr	r0, [pc, #176]	; (80005d4 <update7SEG+0x124>)
 8000524:	f001 fc74 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000528:	2201      	movs	r2, #1
 800052a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800052e:	4829      	ldr	r0, [pc, #164]	; (80005d4 <update7SEG+0x124>)
 8000530:	f001 fc6e 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000534:	2201      	movs	r2, #1
 8000536:	f44f 7100 	mov.w	r1, #512	; 0x200
 800053a:	4826      	ldr	r0, [pc, #152]	; (80005d4 <update7SEG+0x124>)
 800053c:	f001 fc68 	bl	8001e10 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[index]);
 8000540:	4a25      	ldr	r2, [pc, #148]	; (80005d8 <update7SEG+0x128>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff fefd 	bl	8000348 <display7SEG>
        	break ;
 800054e:	e03c      	b.n	80005ca <update7SEG+0x11a>
        case 2:
            // Display the third 7 SEG with led_buffer [2]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000550:	2201      	movs	r2, #1
 8000552:	2140      	movs	r1, #64	; 0x40
 8000554:	481f      	ldr	r0, [pc, #124]	; (80005d4 <update7SEG+0x124>)
 8000556:	f001 fc5b 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 800055a:	2201      	movs	r2, #1
 800055c:	2180      	movs	r1, #128	; 0x80
 800055e:	481d      	ldr	r0, [pc, #116]	; (80005d4 <update7SEG+0x124>)
 8000560:	f001 fc56 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 7180 	mov.w	r1, #256	; 0x100
 800056a:	481a      	ldr	r0, [pc, #104]	; (80005d4 <update7SEG+0x124>)
 800056c:	f001 fc50 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000576:	4817      	ldr	r0, [pc, #92]	; (80005d4 <update7SEG+0x124>)
 8000578:	f001 fc4a 	bl	8001e10 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[index]);
 800057c:	4a16      	ldr	r2, [pc, #88]	; (80005d8 <update7SEG+0x128>)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff fedf 	bl	8000348 <display7SEG>
        	break ;
 800058a:	e01e      	b.n	80005ca <update7SEG+0x11a>
        case 3:
            // Display the forth 7 SEG with led_buffer [3]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 800058c:	2201      	movs	r2, #1
 800058e:	2140      	movs	r1, #64	; 0x40
 8000590:	4810      	ldr	r0, [pc, #64]	; (80005d4 <update7SEG+0x124>)
 8000592:	f001 fc3d 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000596:	2201      	movs	r2, #1
 8000598:	2180      	movs	r1, #128	; 0x80
 800059a:	480e      	ldr	r0, [pc, #56]	; (80005d4 <update7SEG+0x124>)
 800059c:	f001 fc38 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 80005a0:	2201      	movs	r2, #1
 80005a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a6:	480b      	ldr	r0, [pc, #44]	; (80005d4 <update7SEG+0x124>)
 80005a8:	f001 fc32 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 80005ac:	2200      	movs	r2, #0
 80005ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b2:	4808      	ldr	r0, [pc, #32]	; (80005d4 <update7SEG+0x124>)
 80005b4:	f001 fc2c 	bl	8001e10 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[index]);
 80005b8:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <update7SEG+0x128>)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f7ff fec1 	bl	8000348 <display7SEG>
            break ;
 80005c6:	e000      	b.n	80005ca <update7SEG+0x11a>
        default :
            break ;}
 80005c8:	bf00      	nop
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40010800 	.word	0x40010800
 80005d8:	20000010 	.word	0x20000010

080005dc <updateClockBuffer>:

void updateClockBuffer (){
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
	led_buffer[0] = hour / 10;
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <updateClockBuffer+0x70>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a1a      	ldr	r2, [pc, #104]	; (8000650 <updateClockBuffer+0x74>)
 80005e6:	fb82 1203 	smull	r1, r2, r2, r3
 80005ea:	1092      	asrs	r2, r2, #2
 80005ec:	17db      	asrs	r3, r3, #31
 80005ee:	1ad3      	subs	r3, r2, r3
 80005f0:	4a18      	ldr	r2, [pc, #96]	; (8000654 <updateClockBuffer+0x78>)
 80005f2:	6013      	str	r3, [r2, #0]
	led_buffer[1] = hour - 10 * ( hour / 10) ;
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <updateClockBuffer+0x70>)
 80005f6:	6819      	ldr	r1, [r3, #0]
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <updateClockBuffer+0x74>)
 80005fa:	fb83 2301 	smull	r2, r3, r3, r1
 80005fe:	109a      	asrs	r2, r3, #2
 8000600:	17cb      	asrs	r3, r1, #31
 8000602:	1ad2      	subs	r2, r2, r3
 8000604:	4613      	mov	r3, r2
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	4413      	add	r3, r2
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	1aca      	subs	r2, r1, r3
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <updateClockBuffer+0x78>)
 8000610:	605a      	str	r2, [r3, #4]
	led_buffer[2] = minute / 10;
 8000612:	4b11      	ldr	r3, [pc, #68]	; (8000658 <updateClockBuffer+0x7c>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a0e      	ldr	r2, [pc, #56]	; (8000650 <updateClockBuffer+0x74>)
 8000618:	fb82 1203 	smull	r1, r2, r2, r3
 800061c:	1092      	asrs	r2, r2, #2
 800061e:	17db      	asrs	r3, r3, #31
 8000620:	1ad3      	subs	r3, r2, r3
 8000622:	4a0c      	ldr	r2, [pc, #48]	; (8000654 <updateClockBuffer+0x78>)
 8000624:	6093      	str	r3, [r2, #8]
	led_buffer[3] = minute - 10 * (minute / 10);
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <updateClockBuffer+0x7c>)
 8000628:	6819      	ldr	r1, [r3, #0]
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <updateClockBuffer+0x74>)
 800062c:	fb83 2301 	smull	r2, r3, r3, r1
 8000630:	109a      	asrs	r2, r3, #2
 8000632:	17cb      	asrs	r3, r1, #31
 8000634:	1ad2      	subs	r2, r2, r3
 8000636:	4613      	mov	r3, r2
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	4413      	add	r3, r2
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	1aca      	subs	r2, r1, r3
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <updateClockBuffer+0x78>)
 8000642:	60da      	str	r2, [r3, #12]
 }
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr
 800064c:	20000000 	.word	0x20000000
 8000650:	66666667 	.word	0x66666667
 8000654:	20000010 	.word	0x20000010
 8000658:	20000004 	.word	0x20000004

0800065c <displayLedMatrix>:


void displayLedMatrix(int row, uint8_t col){
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	460b      	mov	r3, r1
 8000666:	70fb      	strb	r3, [r7, #3]
	if(row == 0) { // enable row 0
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2b00      	cmp	r3, #0
 800066c:	f040 80b3 	bne.w	80007d6 <displayLedMatrix+0x17a>
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000676:	48bd      	ldr	r0, [pc, #756]	; (800096c <displayLedMatrix+0x310>)
 8000678:	f001 fbca 	bl	8001e10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 800067c:	2201      	movs	r2, #1
 800067e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000682:	48ba      	ldr	r0, [pc, #744]	; (800096c <displayLedMatrix+0x310>)
 8000684:	f001 fbc4 	bl	8001e10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 8000688:	2201      	movs	r2, #1
 800068a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800068e:	48b7      	ldr	r0, [pc, #732]	; (800096c <displayLedMatrix+0x310>)
 8000690:	f001 fbbe 	bl	8001e10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 8000694:	2201      	movs	r2, #1
 8000696:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800069a:	48b4      	ldr	r0, [pc, #720]	; (800096c <displayLedMatrix+0x310>)
 800069c:	f001 fbb8 	bl	8001e10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a6:	48b1      	ldr	r0, [pc, #708]	; (800096c <displayLedMatrix+0x310>)
 80006a8:	f001 fbb2 	bl	8001e10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b2:	48ae      	ldr	r0, [pc, #696]	; (800096c <displayLedMatrix+0x310>)
 80006b4:	f001 fbac 	bl	8001e10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006be:	48ab      	ldr	r0, [pc, #684]	; (800096c <displayLedMatrix+0x310>)
 80006c0:	f001 fba6 	bl	8001e10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ca:	48a8      	ldr	r0, [pc, #672]	; (800096c <displayLedMatrix+0x310>)
 80006cc:	f001 fba0 	bl	8001e10 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1 - (col & 1));
 80006d0:	78fb      	ldrb	r3, [r7, #3]
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	bf0c      	ite	eq
 80006da:	2301      	moveq	r3, #1
 80006dc:	2300      	movne	r3, #0
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	461a      	mov	r2, r3
 80006e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006e6:	48a2      	ldr	r0, [pc, #648]	; (8000970 <displayLedMatrix+0x314>)
 80006e8:	f001 fb92 	bl	8001e10 <HAL_GPIO_WritePin>
		//lay gia tri cua bit nho nhat bang cach and voi 1
		col = col >> 1;
 80006ec:	78fb      	ldrb	r3, [r7, #3]
 80006ee:	085b      	lsrs	r3, r3, #1
 80006f0:	70fb      	strb	r3, [r7, #3]
		//shift sang phai de lay gia tri cua bit tiep theo
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1 - (col & 1));
 80006f2:	78fb      	ldrb	r3, [r7, #3]
 80006f4:	f003 0301 	and.w	r3, r3, #1
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	bf0c      	ite	eq
 80006fc:	2301      	moveq	r3, #1
 80006fe:	2300      	movne	r3, #0
 8000700:	b2db      	uxtb	r3, r3
 8000702:	461a      	mov	r2, r3
 8000704:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000708:	4899      	ldr	r0, [pc, #612]	; (8000970 <displayLedMatrix+0x314>)
 800070a:	f001 fb81 	bl	8001e10 <HAL_GPIO_WritePin>
		col = col >> 1;
 800070e:	78fb      	ldrb	r3, [r7, #3]
 8000710:	085b      	lsrs	r3, r3, #1
 8000712:	70fb      	strb	r3, [r7, #3]
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1 - (col & 1));
 8000714:	78fb      	ldrb	r3, [r7, #3]
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	2b00      	cmp	r3, #0
 800071c:	bf0c      	ite	eq
 800071e:	2301      	moveq	r3, #1
 8000720:	2300      	movne	r3, #0
 8000722:	b2db      	uxtb	r3, r3
 8000724:	461a      	mov	r2, r3
 8000726:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800072a:	4891      	ldr	r0, [pc, #580]	; (8000970 <displayLedMatrix+0x314>)
 800072c:	f001 fb70 	bl	8001e10 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000730:	78fb      	ldrb	r3, [r7, #3]
 8000732:	085b      	lsrs	r3, r3, #1
 8000734:	70fb      	strb	r3, [r7, #3]
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1 - (col & 1));
 8000736:	78fb      	ldrb	r3, [r7, #3]
 8000738:	f003 0301 	and.w	r3, r3, #1
 800073c:	2b00      	cmp	r3, #0
 800073e:	bf0c      	ite	eq
 8000740:	2301      	moveq	r3, #1
 8000742:	2300      	movne	r3, #0
 8000744:	b2db      	uxtb	r3, r3
 8000746:	461a      	mov	r2, r3
 8000748:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800074c:	4888      	ldr	r0, [pc, #544]	; (8000970 <displayLedMatrix+0x314>)
 800074e:	f001 fb5f 	bl	8001e10 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000752:	78fb      	ldrb	r3, [r7, #3]
 8000754:	085b      	lsrs	r3, r3, #1
 8000756:	70fb      	strb	r3, [r7, #3]
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1 - (col & 1));
 8000758:	78fb      	ldrb	r3, [r7, #3]
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	2b00      	cmp	r3, #0
 8000760:	bf0c      	ite	eq
 8000762:	2301      	moveq	r3, #1
 8000764:	2300      	movne	r3, #0
 8000766:	b2db      	uxtb	r3, r3
 8000768:	461a      	mov	r2, r3
 800076a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800076e:	4880      	ldr	r0, [pc, #512]	; (8000970 <displayLedMatrix+0x314>)
 8000770:	f001 fb4e 	bl	8001e10 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000774:	78fb      	ldrb	r3, [r7, #3]
 8000776:	085b      	lsrs	r3, r3, #1
 8000778:	70fb      	strb	r3, [r7, #3]
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1 - (col & 1));
 800077a:	78fb      	ldrb	r3, [r7, #3]
 800077c:	f003 0301 	and.w	r3, r3, #1
 8000780:	2b00      	cmp	r3, #0
 8000782:	bf0c      	ite	eq
 8000784:	2301      	moveq	r3, #1
 8000786:	2300      	movne	r3, #0
 8000788:	b2db      	uxtb	r3, r3
 800078a:	461a      	mov	r2, r3
 800078c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000790:	4877      	ldr	r0, [pc, #476]	; (8000970 <displayLedMatrix+0x314>)
 8000792:	f001 fb3d 	bl	8001e10 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000796:	78fb      	ldrb	r3, [r7, #3]
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	70fb      	strb	r3, [r7, #3]
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1 - (col & 1));
 800079c:	78fb      	ldrb	r3, [r7, #3]
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	bf0c      	ite	eq
 80007a6:	2301      	moveq	r3, #1
 80007a8:	2300      	movne	r3, #0
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	461a      	mov	r2, r3
 80007ae:	2104      	movs	r1, #4
 80007b0:	486f      	ldr	r0, [pc, #444]	; (8000970 <displayLedMatrix+0x314>)
 80007b2:	f001 fb2d 	bl	8001e10 <HAL_GPIO_WritePin>
		col = col >> 1;
 80007b6:	78fb      	ldrb	r3, [r7, #3]
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	70fb      	strb	r3, [r7, #3]
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin,  1 - (col & 1));
 80007bc:	78fb      	ldrb	r3, [r7, #3]
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	bf0c      	ite	eq
 80007c6:	2301      	moveq	r3, #1
 80007c8:	2300      	movne	r3, #0
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	461a      	mov	r2, r3
 80007ce:	2102      	movs	r1, #2
 80007d0:	4867      	ldr	r0, [pc, #412]	; (8000970 <displayLedMatrix+0x314>)
 80007d2:	f001 fb1d 	bl	8001e10 <HAL_GPIO_WritePin>
	}
	if(row == 1) { // enable row 1
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	f040 80b3 	bne.w	8000944 <displayLedMatrix+0x2e8>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 80007de:	2201      	movs	r2, #1
 80007e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007e4:	4861      	ldr	r0, [pc, #388]	; (800096c <displayLedMatrix+0x310>)
 80007e6:	f001 fb13 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007f0:	485e      	ldr	r0, [pc, #376]	; (800096c <displayLedMatrix+0x310>)
 80007f2:	f001 fb0d 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 80007f6:	2201      	movs	r2, #1
 80007f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007fc:	485b      	ldr	r0, [pc, #364]	; (800096c <displayLedMatrix+0x310>)
 80007fe:	f001 fb07 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 8000802:	2201      	movs	r2, #1
 8000804:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000808:	4858      	ldr	r0, [pc, #352]	; (800096c <displayLedMatrix+0x310>)
 800080a:	f001 fb01 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 800080e:	2201      	movs	r2, #1
 8000810:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000814:	4855      	ldr	r0, [pc, #340]	; (800096c <displayLedMatrix+0x310>)
 8000816:	f001 fafb 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 800081a:	2201      	movs	r2, #1
 800081c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000820:	4852      	ldr	r0, [pc, #328]	; (800096c <displayLedMatrix+0x310>)
 8000822:	f001 faf5 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 8000826:	2201      	movs	r2, #1
 8000828:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800082c:	484f      	ldr	r0, [pc, #316]	; (800096c <displayLedMatrix+0x310>)
 800082e:	f001 faef 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 8000832:	2201      	movs	r2, #1
 8000834:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000838:	484c      	ldr	r0, [pc, #304]	; (800096c <displayLedMatrix+0x310>)
 800083a:	f001 fae9 	bl	8001e10 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1 - (col & 1));
 800083e:	78fb      	ldrb	r3, [r7, #3]
 8000840:	f003 0301 	and.w	r3, r3, #1
 8000844:	2b00      	cmp	r3, #0
 8000846:	bf0c      	ite	eq
 8000848:	2301      	moveq	r3, #1
 800084a:	2300      	movne	r3, #0
 800084c:	b2db      	uxtb	r3, r3
 800084e:	461a      	mov	r2, r3
 8000850:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000854:	4846      	ldr	r0, [pc, #280]	; (8000970 <displayLedMatrix+0x314>)
 8000856:	f001 fadb 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 800085a:	78fb      	ldrb	r3, [r7, #3]
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1 - (col & 1));
 8000860:	78fb      	ldrb	r3, [r7, #3]
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	2b00      	cmp	r3, #0
 8000868:	bf0c      	ite	eq
 800086a:	2301      	moveq	r3, #1
 800086c:	2300      	movne	r3, #0
 800086e:	b2db      	uxtb	r3, r3
 8000870:	461a      	mov	r2, r3
 8000872:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000876:	483e      	ldr	r0, [pc, #248]	; (8000970 <displayLedMatrix+0x314>)
 8000878:	f001 faca 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 800087c:	78fb      	ldrb	r3, [r7, #3]
 800087e:	085b      	lsrs	r3, r3, #1
 8000880:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1 - (col & 1));
 8000882:	78fb      	ldrb	r3, [r7, #3]
 8000884:	f003 0301 	and.w	r3, r3, #1
 8000888:	2b00      	cmp	r3, #0
 800088a:	bf0c      	ite	eq
 800088c:	2301      	moveq	r3, #1
 800088e:	2300      	movne	r3, #0
 8000890:	b2db      	uxtb	r3, r3
 8000892:	461a      	mov	r2, r3
 8000894:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000898:	4835      	ldr	r0, [pc, #212]	; (8000970 <displayLedMatrix+0x314>)
 800089a:	f001 fab9 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 800089e:	78fb      	ldrb	r3, [r7, #3]
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1 - (col & 1));
 80008a4:	78fb      	ldrb	r3, [r7, #3]
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	bf0c      	ite	eq
 80008ae:	2301      	moveq	r3, #1
 80008b0:	2300      	movne	r3, #0
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	461a      	mov	r2, r3
 80008b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008ba:	482d      	ldr	r0, [pc, #180]	; (8000970 <displayLedMatrix+0x314>)
 80008bc:	f001 faa8 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 80008c0:	78fb      	ldrb	r3, [r7, #3]
 80008c2:	085b      	lsrs	r3, r3, #1
 80008c4:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1 - (col & 1));
 80008c6:	78fb      	ldrb	r3, [r7, #3]
 80008c8:	f003 0301 	and.w	r3, r3, #1
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	bf0c      	ite	eq
 80008d0:	2301      	moveq	r3, #1
 80008d2:	2300      	movne	r3, #0
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	461a      	mov	r2, r3
 80008d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008dc:	4824      	ldr	r0, [pc, #144]	; (8000970 <displayLedMatrix+0x314>)
 80008de:	f001 fa97 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 80008e2:	78fb      	ldrb	r3, [r7, #3]
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1 - (col & 1));
 80008e8:	78fb      	ldrb	r3, [r7, #3]
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	bf0c      	ite	eq
 80008f2:	2301      	moveq	r3, #1
 80008f4:	2300      	movne	r3, #0
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	461a      	mov	r2, r3
 80008fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008fe:	481c      	ldr	r0, [pc, #112]	; (8000970 <displayLedMatrix+0x314>)
 8000900:	f001 fa86 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000904:	78fb      	ldrb	r3, [r7, #3]
 8000906:	085b      	lsrs	r3, r3, #1
 8000908:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1 - (col & 1));
 800090a:	78fb      	ldrb	r3, [r7, #3]
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	2b00      	cmp	r3, #0
 8000912:	bf0c      	ite	eq
 8000914:	2301      	moveq	r3, #1
 8000916:	2300      	movne	r3, #0
 8000918:	b2db      	uxtb	r3, r3
 800091a:	461a      	mov	r2, r3
 800091c:	2104      	movs	r1, #4
 800091e:	4814      	ldr	r0, [pc, #80]	; (8000970 <displayLedMatrix+0x314>)
 8000920:	f001 fa76 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000924:	78fb      	ldrb	r3, [r7, #3]
 8000926:	085b      	lsrs	r3, r3, #1
 8000928:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, 1 - (col & 1));
 800092a:	78fb      	ldrb	r3, [r7, #3]
 800092c:	f003 0301 	and.w	r3, r3, #1
 8000930:	2b00      	cmp	r3, #0
 8000932:	bf0c      	ite	eq
 8000934:	2301      	moveq	r3, #1
 8000936:	2300      	movne	r3, #0
 8000938:	b2db      	uxtb	r3, r3
 800093a:	461a      	mov	r2, r3
 800093c:	2102      	movs	r1, #2
 800093e:	480c      	ldr	r0, [pc, #48]	; (8000970 <displayLedMatrix+0x314>)
 8000940:	f001 fa66 	bl	8001e10 <HAL_GPIO_WritePin>
		}
	if(row == 1) { // enable row 2
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2b01      	cmp	r3, #1
 8000948:	f040 80b8 	bne.w	8000abc <displayLedMatrix+0x460>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 800094c:	2201      	movs	r2, #1
 800094e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000952:	4806      	ldr	r0, [pc, #24]	; (800096c <displayLedMatrix+0x310>)
 8000954:	f001 fa5c 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 8000958:	2201      	movs	r2, #1
 800095a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800095e:	4803      	ldr	r0, [pc, #12]	; (800096c <displayLedMatrix+0x310>)
 8000960:	f001 fa56 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800096a:	e003      	b.n	8000974 <displayLedMatrix+0x318>
 800096c:	40010c00 	.word	0x40010c00
 8000970:	40010800 	.word	0x40010800
 8000974:	48bd      	ldr	r0, [pc, #756]	; (8000c6c <displayLedMatrix+0x610>)
 8000976:	f001 fa4b 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 800097a:	2201      	movs	r2, #1
 800097c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000980:	48ba      	ldr	r0, [pc, #744]	; (8000c6c <displayLedMatrix+0x610>)
 8000982:	f001 fa45 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 8000986:	2201      	movs	r2, #1
 8000988:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800098c:	48b7      	ldr	r0, [pc, #732]	; (8000c6c <displayLedMatrix+0x610>)
 800098e:	f001 fa3f 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 8000992:	2201      	movs	r2, #1
 8000994:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000998:	48b4      	ldr	r0, [pc, #720]	; (8000c6c <displayLedMatrix+0x610>)
 800099a:	f001 fa39 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 800099e:	2201      	movs	r2, #1
 80009a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009a4:	48b1      	ldr	r0, [pc, #708]	; (8000c6c <displayLedMatrix+0x610>)
 80009a6:	f001 fa33 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 80009aa:	2201      	movs	r2, #1
 80009ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009b0:	48ae      	ldr	r0, [pc, #696]	; (8000c6c <displayLedMatrix+0x610>)
 80009b2:	f001 fa2d 	bl	8001e10 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1 - (col & 1));
 80009b6:	78fb      	ldrb	r3, [r7, #3]
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	2b00      	cmp	r3, #0
 80009be:	bf0c      	ite	eq
 80009c0:	2301      	moveq	r3, #1
 80009c2:	2300      	movne	r3, #0
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	461a      	mov	r2, r3
 80009c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009cc:	48a8      	ldr	r0, [pc, #672]	; (8000c70 <displayLedMatrix+0x614>)
 80009ce:	f001 fa1f 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 80009d2:	78fb      	ldrb	r3, [r7, #3]
 80009d4:	085b      	lsrs	r3, r3, #1
 80009d6:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1 - (col & 1));
 80009d8:	78fb      	ldrb	r3, [r7, #3]
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	bf0c      	ite	eq
 80009e2:	2301      	moveq	r3, #1
 80009e4:	2300      	movne	r3, #0
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	461a      	mov	r2, r3
 80009ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ee:	48a0      	ldr	r0, [pc, #640]	; (8000c70 <displayLedMatrix+0x614>)
 80009f0:	f001 fa0e 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 80009f4:	78fb      	ldrb	r3, [r7, #3]
 80009f6:	085b      	lsrs	r3, r3, #1
 80009f8:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1 - (col & 1));
 80009fa:	78fb      	ldrb	r3, [r7, #3]
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	bf0c      	ite	eq
 8000a04:	2301      	moveq	r3, #1
 8000a06:	2300      	movne	r3, #0
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a10:	4897      	ldr	r0, [pc, #604]	; (8000c70 <displayLedMatrix+0x614>)
 8000a12:	f001 f9fd 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000a16:	78fb      	ldrb	r3, [r7, #3]
 8000a18:	085b      	lsrs	r3, r3, #1
 8000a1a:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1 - (col & 1));
 8000a1c:	78fb      	ldrb	r3, [r7, #3]
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	bf0c      	ite	eq
 8000a26:	2301      	moveq	r3, #1
 8000a28:	2300      	movne	r3, #0
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a32:	488f      	ldr	r0, [pc, #572]	; (8000c70 <displayLedMatrix+0x614>)
 8000a34:	f001 f9ec 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000a38:	78fb      	ldrb	r3, [r7, #3]
 8000a3a:	085b      	lsrs	r3, r3, #1
 8000a3c:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1 - (col & 1));
 8000a3e:	78fb      	ldrb	r3, [r7, #3]
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	bf0c      	ite	eq
 8000a48:	2301      	moveq	r3, #1
 8000a4a:	2300      	movne	r3, #0
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	461a      	mov	r2, r3
 8000a50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a54:	4886      	ldr	r0, [pc, #536]	; (8000c70 <displayLedMatrix+0x614>)
 8000a56:	f001 f9db 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000a5a:	78fb      	ldrb	r3, [r7, #3]
 8000a5c:	085b      	lsrs	r3, r3, #1
 8000a5e:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1 - (col & 1));
 8000a60:	78fb      	ldrb	r3, [r7, #3]
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	bf0c      	ite	eq
 8000a6a:	2301      	moveq	r3, #1
 8000a6c:	2300      	movne	r3, #0
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	461a      	mov	r2, r3
 8000a72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a76:	487e      	ldr	r0, [pc, #504]	; (8000c70 <displayLedMatrix+0x614>)
 8000a78:	f001 f9ca 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000a7c:	78fb      	ldrb	r3, [r7, #3]
 8000a7e:	085b      	lsrs	r3, r3, #1
 8000a80:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1 - (col & 1));
 8000a82:	78fb      	ldrb	r3, [r7, #3]
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	bf0c      	ite	eq
 8000a8c:	2301      	moveq	r3, #1
 8000a8e:	2300      	movne	r3, #0
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	461a      	mov	r2, r3
 8000a94:	2104      	movs	r1, #4
 8000a96:	4876      	ldr	r0, [pc, #472]	; (8000c70 <displayLedMatrix+0x614>)
 8000a98:	f001 f9ba 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000a9c:	78fb      	ldrb	r3, [r7, #3]
 8000a9e:	085b      	lsrs	r3, r3, #1
 8000aa0:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin,  1 - (col & 1));
 8000aa2:	78fb      	ldrb	r3, [r7, #3]
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	bf0c      	ite	eq
 8000aac:	2301      	moveq	r3, #1
 8000aae:	2300      	movne	r3, #0
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	2102      	movs	r1, #2
 8000ab6:	486e      	ldr	r0, [pc, #440]	; (8000c70 <displayLedMatrix+0x614>)
 8000ab8:	f001 f9aa 	bl	8001e10 <HAL_GPIO_WritePin>
		}
	if(row == 3) { // enable row 3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b03      	cmp	r3, #3
 8000ac0:	f040 80b3 	bne.w	8000c2a <displayLedMatrix+0x5ce>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aca:	4868      	ldr	r0, [pc, #416]	; (8000c6c <displayLedMatrix+0x610>)
 8000acc:	f001 f9a0 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ad6:	4865      	ldr	r0, [pc, #404]	; (8000c6c <displayLedMatrix+0x610>)
 8000ad8:	f001 f99a 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 8000adc:	2201      	movs	r2, #1
 8000ade:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae2:	4862      	ldr	r0, [pc, #392]	; (8000c6c <displayLedMatrix+0x610>)
 8000ae4:	f001 f994 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aee:	485f      	ldr	r0, [pc, #380]	; (8000c6c <displayLedMatrix+0x610>)
 8000af0:	f001 f98e 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000afa:	485c      	ldr	r0, [pc, #368]	; (8000c6c <displayLedMatrix+0x610>)
 8000afc:	f001 f988 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b06:	4859      	ldr	r0, [pc, #356]	; (8000c6c <displayLedMatrix+0x610>)
 8000b08:	f001 f982 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b12:	4856      	ldr	r0, [pc, #344]	; (8000c6c <displayLedMatrix+0x610>)
 8000b14:	f001 f97c 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b1e:	4853      	ldr	r0, [pc, #332]	; (8000c6c <displayLedMatrix+0x610>)
 8000b20:	f001 f976 	bl	8001e10 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1 - (col & 1));
 8000b24:	78fb      	ldrb	r3, [r7, #3]
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	bf0c      	ite	eq
 8000b2e:	2301      	moveq	r3, #1
 8000b30:	2300      	movne	r3, #0
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	461a      	mov	r2, r3
 8000b36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b3a:	484d      	ldr	r0, [pc, #308]	; (8000c70 <displayLedMatrix+0x614>)
 8000b3c:	f001 f968 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000b40:	78fb      	ldrb	r3, [r7, #3]
 8000b42:	085b      	lsrs	r3, r3, #1
 8000b44:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1 - (col & 1));
 8000b46:	78fb      	ldrb	r3, [r7, #3]
 8000b48:	f003 0301 	and.w	r3, r3, #1
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	bf0c      	ite	eq
 8000b50:	2301      	moveq	r3, #1
 8000b52:	2300      	movne	r3, #0
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	461a      	mov	r2, r3
 8000b58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b5c:	4844      	ldr	r0, [pc, #272]	; (8000c70 <displayLedMatrix+0x614>)
 8000b5e:	f001 f957 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000b62:	78fb      	ldrb	r3, [r7, #3]
 8000b64:	085b      	lsrs	r3, r3, #1
 8000b66:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1 - (col & 1));
 8000b68:	78fb      	ldrb	r3, [r7, #3]
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	bf0c      	ite	eq
 8000b72:	2301      	moveq	r3, #1
 8000b74:	2300      	movne	r3, #0
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	461a      	mov	r2, r3
 8000b7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b7e:	483c      	ldr	r0, [pc, #240]	; (8000c70 <displayLedMatrix+0x614>)
 8000b80:	f001 f946 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000b84:	78fb      	ldrb	r3, [r7, #3]
 8000b86:	085b      	lsrs	r3, r3, #1
 8000b88:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1 - (col & 1));
 8000b8a:	78fb      	ldrb	r3, [r7, #3]
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	bf0c      	ite	eq
 8000b94:	2301      	moveq	r3, #1
 8000b96:	2300      	movne	r3, #0
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ba0:	4833      	ldr	r0, [pc, #204]	; (8000c70 <displayLedMatrix+0x614>)
 8000ba2:	f001 f935 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000ba6:	78fb      	ldrb	r3, [r7, #3]
 8000ba8:	085b      	lsrs	r3, r3, #1
 8000baa:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1 - (col & 1));
 8000bac:	78fb      	ldrb	r3, [r7, #3]
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	bf0c      	ite	eq
 8000bb6:	2301      	moveq	r3, #1
 8000bb8:	2300      	movne	r3, #0
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bc2:	482b      	ldr	r0, [pc, #172]	; (8000c70 <displayLedMatrix+0x614>)
 8000bc4:	f001 f924 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000bc8:	78fb      	ldrb	r3, [r7, #3]
 8000bca:	085b      	lsrs	r3, r3, #1
 8000bcc:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1 - (col & 1));
 8000bce:	78fb      	ldrb	r3, [r7, #3]
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	bf0c      	ite	eq
 8000bd8:	2301      	moveq	r3, #1
 8000bda:	2300      	movne	r3, #0
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	461a      	mov	r2, r3
 8000be0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000be4:	4822      	ldr	r0, [pc, #136]	; (8000c70 <displayLedMatrix+0x614>)
 8000be6:	f001 f913 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000bea:	78fb      	ldrb	r3, [r7, #3]
 8000bec:	085b      	lsrs	r3, r3, #1
 8000bee:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1 - (col & 1));
 8000bf0:	78fb      	ldrb	r3, [r7, #3]
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	bf0c      	ite	eq
 8000bfa:	2301      	moveq	r3, #1
 8000bfc:	2300      	movne	r3, #0
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	461a      	mov	r2, r3
 8000c02:	2104      	movs	r1, #4
 8000c04:	481a      	ldr	r0, [pc, #104]	; (8000c70 <displayLedMatrix+0x614>)
 8000c06:	f001 f903 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000c0a:	78fb      	ldrb	r3, [r7, #3]
 8000c0c:	085b      	lsrs	r3, r3, #1
 8000c0e:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin,  1 - (col & 1));
 8000c10:	78fb      	ldrb	r3, [r7, #3]
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	bf0c      	ite	eq
 8000c1a:	2301      	moveq	r3, #1
 8000c1c:	2300      	movne	r3, #0
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	461a      	mov	r2, r3
 8000c22:	2102      	movs	r1, #2
 8000c24:	4812      	ldr	r0, [pc, #72]	; (8000c70 <displayLedMatrix+0x614>)
 8000c26:	f001 f8f3 	bl	8001e10 <HAL_GPIO_WritePin>
		}
	if(row == 4) { // enable row 4
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b04      	cmp	r3, #4
 8000c2e:	f040 80b9 	bne.w	8000da4 <displayLedMatrix+0x748>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 8000c32:	2201      	movs	r2, #1
 8000c34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c38:	480c      	ldr	r0, [pc, #48]	; (8000c6c <displayLedMatrix+0x610>)
 8000c3a:	f001 f8e9 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c44:	4809      	ldr	r0, [pc, #36]	; (8000c6c <displayLedMatrix+0x610>)
 8000c46:	f001 f8e3 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c50:	4806      	ldr	r0, [pc, #24]	; (8000c6c <displayLedMatrix+0x610>)
 8000c52:	f001 f8dd 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 8000c56:	2201      	movs	r2, #1
 8000c58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c5c:	4803      	ldr	r0, [pc, #12]	; (8000c6c <displayLedMatrix+0x610>)
 8000c5e:	f001 f8d7 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c68:	e004      	b.n	8000c74 <displayLedMatrix+0x618>
 8000c6a:	bf00      	nop
 8000c6c:	40010c00 	.word	0x40010c00
 8000c70:	40010800 	.word	0x40010800
 8000c74:	48bd      	ldr	r0, [pc, #756]	; (8000f6c <displayLedMatrix+0x910>)
 8000c76:	f001 f8cb 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c80:	48ba      	ldr	r0, [pc, #744]	; (8000f6c <displayLedMatrix+0x910>)
 8000c82:	f001 f8c5 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 8000c86:	2201      	movs	r2, #1
 8000c88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c8c:	48b7      	ldr	r0, [pc, #732]	; (8000f6c <displayLedMatrix+0x910>)
 8000c8e:	f001 f8bf 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c98:	48b4      	ldr	r0, [pc, #720]	; (8000f6c <displayLedMatrix+0x910>)
 8000c9a:	f001 f8b9 	bl	8001e10 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1 - (col & 1));
 8000c9e:	78fb      	ldrb	r3, [r7, #3]
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	bf0c      	ite	eq
 8000ca8:	2301      	moveq	r3, #1
 8000caa:	2300      	movne	r3, #0
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	461a      	mov	r2, r3
 8000cb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cb4:	48ae      	ldr	r0, [pc, #696]	; (8000f70 <displayLedMatrix+0x914>)
 8000cb6:	f001 f8ab 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000cba:	78fb      	ldrb	r3, [r7, #3]
 8000cbc:	085b      	lsrs	r3, r3, #1
 8000cbe:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1 - (col & 1));
 8000cc0:	78fb      	ldrb	r3, [r7, #3]
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	bf0c      	ite	eq
 8000cca:	2301      	moveq	r3, #1
 8000ccc:	2300      	movne	r3, #0
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cd6:	48a6      	ldr	r0, [pc, #664]	; (8000f70 <displayLedMatrix+0x914>)
 8000cd8:	f001 f89a 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000cdc:	78fb      	ldrb	r3, [r7, #3]
 8000cde:	085b      	lsrs	r3, r3, #1
 8000ce0:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1 - (col & 1));
 8000ce2:	78fb      	ldrb	r3, [r7, #3]
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	bf0c      	ite	eq
 8000cec:	2301      	moveq	r3, #1
 8000cee:	2300      	movne	r3, #0
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf8:	489d      	ldr	r0, [pc, #628]	; (8000f70 <displayLedMatrix+0x914>)
 8000cfa:	f001 f889 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000cfe:	78fb      	ldrb	r3, [r7, #3]
 8000d00:	085b      	lsrs	r3, r3, #1
 8000d02:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1 - (col & 1));
 8000d04:	78fb      	ldrb	r3, [r7, #3]
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	bf0c      	ite	eq
 8000d0e:	2301      	moveq	r3, #1
 8000d10:	2300      	movne	r3, #0
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	461a      	mov	r2, r3
 8000d16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d1a:	4895      	ldr	r0, [pc, #596]	; (8000f70 <displayLedMatrix+0x914>)
 8000d1c:	f001 f878 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000d20:	78fb      	ldrb	r3, [r7, #3]
 8000d22:	085b      	lsrs	r3, r3, #1
 8000d24:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1 - (col & 1));
 8000d26:	78fb      	ldrb	r3, [r7, #3]
 8000d28:	f003 0301 	and.w	r3, r3, #1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	bf0c      	ite	eq
 8000d30:	2301      	moveq	r3, #1
 8000d32:	2300      	movne	r3, #0
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	461a      	mov	r2, r3
 8000d38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d3c:	488c      	ldr	r0, [pc, #560]	; (8000f70 <displayLedMatrix+0x914>)
 8000d3e:	f001 f867 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000d42:	78fb      	ldrb	r3, [r7, #3]
 8000d44:	085b      	lsrs	r3, r3, #1
 8000d46:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1 - (col & 1));
 8000d48:	78fb      	ldrb	r3, [r7, #3]
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	bf0c      	ite	eq
 8000d52:	2301      	moveq	r3, #1
 8000d54:	2300      	movne	r3, #0
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	461a      	mov	r2, r3
 8000d5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d5e:	4884      	ldr	r0, [pc, #528]	; (8000f70 <displayLedMatrix+0x914>)
 8000d60:	f001 f856 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000d64:	78fb      	ldrb	r3, [r7, #3]
 8000d66:	085b      	lsrs	r3, r3, #1
 8000d68:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1 - (col & 1));
 8000d6a:	78fb      	ldrb	r3, [r7, #3]
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	bf0c      	ite	eq
 8000d74:	2301      	moveq	r3, #1
 8000d76:	2300      	movne	r3, #0
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	2104      	movs	r1, #4
 8000d7e:	487c      	ldr	r0, [pc, #496]	; (8000f70 <displayLedMatrix+0x914>)
 8000d80:	f001 f846 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000d84:	78fb      	ldrb	r3, [r7, #3]
 8000d86:	085b      	lsrs	r3, r3, #1
 8000d88:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin,  1 - (col & 1));
 8000d8a:	78fb      	ldrb	r3, [r7, #3]
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	bf0c      	ite	eq
 8000d94:	2301      	moveq	r3, #1
 8000d96:	2300      	movne	r3, #0
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	2102      	movs	r1, #2
 8000d9e:	4874      	ldr	r0, [pc, #464]	; (8000f70 <displayLedMatrix+0x914>)
 8000da0:	f001 f836 	bl	8001e10 <HAL_GPIO_WritePin>
		}
	if(row == 5) { // enable row 5
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b05      	cmp	r3, #5
 8000da8:	f040 80b3 	bne.w	8000f12 <displayLedMatrix+0x8b6>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 8000dac:	2201      	movs	r2, #1
 8000dae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000db2:	486e      	ldr	r0, [pc, #440]	; (8000f6c <displayLedMatrix+0x910>)
 8000db4:	f001 f82c 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 8000db8:	2201      	movs	r2, #1
 8000dba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dbe:	486b      	ldr	r0, [pc, #428]	; (8000f6c <displayLedMatrix+0x910>)
 8000dc0:	f001 f826 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dca:	4868      	ldr	r0, [pc, #416]	; (8000f6c <displayLedMatrix+0x910>)
 8000dcc:	f001 f820 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dd6:	4865      	ldr	r0, [pc, #404]	; (8000f6c <displayLedMatrix+0x910>)
 8000dd8:	f001 f81a 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000de2:	4862      	ldr	r0, [pc, #392]	; (8000f6c <displayLedMatrix+0x910>)
 8000de4:	f001 f814 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dee:	485f      	ldr	r0, [pc, #380]	; (8000f6c <displayLedMatrix+0x910>)
 8000df0:	f001 f80e 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 8000df4:	2201      	movs	r2, #1
 8000df6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dfa:	485c      	ldr	r0, [pc, #368]	; (8000f6c <displayLedMatrix+0x910>)
 8000dfc:	f001 f808 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 8000e00:	2201      	movs	r2, #1
 8000e02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e06:	4859      	ldr	r0, [pc, #356]	; (8000f6c <displayLedMatrix+0x910>)
 8000e08:	f001 f802 	bl	8001e10 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1 - (col & 1));
 8000e0c:	78fb      	ldrb	r3, [r7, #3]
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	bf0c      	ite	eq
 8000e16:	2301      	moveq	r3, #1
 8000e18:	2300      	movne	r3, #0
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e22:	4853      	ldr	r0, [pc, #332]	; (8000f70 <displayLedMatrix+0x914>)
 8000e24:	f000 fff4 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000e28:	78fb      	ldrb	r3, [r7, #3]
 8000e2a:	085b      	lsrs	r3, r3, #1
 8000e2c:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1 - (col & 1));
 8000e2e:	78fb      	ldrb	r3, [r7, #3]
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	bf0c      	ite	eq
 8000e38:	2301      	moveq	r3, #1
 8000e3a:	2300      	movne	r3, #0
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	461a      	mov	r2, r3
 8000e40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e44:	484a      	ldr	r0, [pc, #296]	; (8000f70 <displayLedMatrix+0x914>)
 8000e46:	f000 ffe3 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000e4a:	78fb      	ldrb	r3, [r7, #3]
 8000e4c:	085b      	lsrs	r3, r3, #1
 8000e4e:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1 - (col & 1));
 8000e50:	78fb      	ldrb	r3, [r7, #3]
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	bf0c      	ite	eq
 8000e5a:	2301      	moveq	r3, #1
 8000e5c:	2300      	movne	r3, #0
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	461a      	mov	r2, r3
 8000e62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e66:	4842      	ldr	r0, [pc, #264]	; (8000f70 <displayLedMatrix+0x914>)
 8000e68:	f000 ffd2 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000e6c:	78fb      	ldrb	r3, [r7, #3]
 8000e6e:	085b      	lsrs	r3, r3, #1
 8000e70:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1 - (col & 1));
 8000e72:	78fb      	ldrb	r3, [r7, #3]
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	bf0c      	ite	eq
 8000e7c:	2301      	moveq	r3, #1
 8000e7e:	2300      	movne	r3, #0
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	461a      	mov	r2, r3
 8000e84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e88:	4839      	ldr	r0, [pc, #228]	; (8000f70 <displayLedMatrix+0x914>)
 8000e8a:	f000 ffc1 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000e8e:	78fb      	ldrb	r3, [r7, #3]
 8000e90:	085b      	lsrs	r3, r3, #1
 8000e92:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1 - (col & 1));
 8000e94:	78fb      	ldrb	r3, [r7, #3]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	bf0c      	ite	eq
 8000e9e:	2301      	moveq	r3, #1
 8000ea0:	2300      	movne	r3, #0
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eaa:	4831      	ldr	r0, [pc, #196]	; (8000f70 <displayLedMatrix+0x914>)
 8000eac:	f000 ffb0 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000eb0:	78fb      	ldrb	r3, [r7, #3]
 8000eb2:	085b      	lsrs	r3, r3, #1
 8000eb4:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1 - (col & 1));
 8000eb6:	78fb      	ldrb	r3, [r7, #3]
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	bf0c      	ite	eq
 8000ec0:	2301      	moveq	r3, #1
 8000ec2:	2300      	movne	r3, #0
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ecc:	4828      	ldr	r0, [pc, #160]	; (8000f70 <displayLedMatrix+0x914>)
 8000ece:	f000 ff9f 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000ed2:	78fb      	ldrb	r3, [r7, #3]
 8000ed4:	085b      	lsrs	r3, r3, #1
 8000ed6:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1 - (col & 1));
 8000ed8:	78fb      	ldrb	r3, [r7, #3]
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	bf0c      	ite	eq
 8000ee2:	2301      	moveq	r3, #1
 8000ee4:	2300      	movne	r3, #0
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	461a      	mov	r2, r3
 8000eea:	2104      	movs	r1, #4
 8000eec:	4820      	ldr	r0, [pc, #128]	; (8000f70 <displayLedMatrix+0x914>)
 8000eee:	f000 ff8f 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000ef2:	78fb      	ldrb	r3, [r7, #3]
 8000ef4:	085b      	lsrs	r3, r3, #1
 8000ef6:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin,  1 - (col & 1));
 8000ef8:	78fb      	ldrb	r3, [r7, #3]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	bf0c      	ite	eq
 8000f02:	2301      	moveq	r3, #1
 8000f04:	2300      	movne	r3, #0
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	461a      	mov	r2, r3
 8000f0a:	2102      	movs	r1, #2
 8000f0c:	4818      	ldr	r0, [pc, #96]	; (8000f70 <displayLedMatrix+0x914>)
 8000f0e:	f000 ff7f 	bl	8001e10 <HAL_GPIO_WritePin>
		}
	if(row == 6) { // enable row 6
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b06      	cmp	r3, #6
 8000f16:	f040 80b9 	bne.w	800108c <displayLedMatrix+0xa30>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f20:	4812      	ldr	r0, [pc, #72]	; (8000f6c <displayLedMatrix+0x910>)
 8000f22:	f000 ff75 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 8000f26:	2201      	movs	r2, #1
 8000f28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f2c:	480f      	ldr	r0, [pc, #60]	; (8000f6c <displayLedMatrix+0x910>)
 8000f2e:	f000 ff6f 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 8000f32:	2201      	movs	r2, #1
 8000f34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f38:	480c      	ldr	r0, [pc, #48]	; (8000f6c <displayLedMatrix+0x910>)
 8000f3a:	f000 ff69 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f44:	4809      	ldr	r0, [pc, #36]	; (8000f6c <displayLedMatrix+0x910>)
 8000f46:	f000 ff63 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f50:	4806      	ldr	r0, [pc, #24]	; (8000f6c <displayLedMatrix+0x910>)
 8000f52:	f000 ff5d 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 8000f56:	2201      	movs	r2, #1
 8000f58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f5c:	4803      	ldr	r0, [pc, #12]	; (8000f6c <displayLedMatrix+0x910>)
 8000f5e:	f000 ff57 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f68:	e004      	b.n	8000f74 <displayLedMatrix+0x918>
 8000f6a:	bf00      	nop
 8000f6c:	40010c00 	.word	0x40010c00
 8000f70:	40010800 	.word	0x40010800
 8000f74:	48a3      	ldr	r0, [pc, #652]	; (8001204 <displayLedMatrix+0xba8>)
 8000f76:	f000 ff4b 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f80:	48a0      	ldr	r0, [pc, #640]	; (8001204 <displayLedMatrix+0xba8>)
 8000f82:	f000 ff45 	bl	8001e10 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1 - (col & 1));
 8000f86:	78fb      	ldrb	r3, [r7, #3]
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	bf0c      	ite	eq
 8000f90:	2301      	moveq	r3, #1
 8000f92:	2300      	movne	r3, #0
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	461a      	mov	r2, r3
 8000f98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f9c:	489a      	ldr	r0, [pc, #616]	; (8001208 <displayLedMatrix+0xbac>)
 8000f9e:	f000 ff37 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000fa2:	78fb      	ldrb	r3, [r7, #3]
 8000fa4:	085b      	lsrs	r3, r3, #1
 8000fa6:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1 - (col & 1));
 8000fa8:	78fb      	ldrb	r3, [r7, #3]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	bf0c      	ite	eq
 8000fb2:	2301      	moveq	r3, #1
 8000fb4:	2300      	movne	r3, #0
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	461a      	mov	r2, r3
 8000fba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fbe:	4892      	ldr	r0, [pc, #584]	; (8001208 <displayLedMatrix+0xbac>)
 8000fc0:	f000 ff26 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000fc4:	78fb      	ldrb	r3, [r7, #3]
 8000fc6:	085b      	lsrs	r3, r3, #1
 8000fc8:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1 - (col & 1));
 8000fca:	78fb      	ldrb	r3, [r7, #3]
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	bf0c      	ite	eq
 8000fd4:	2301      	moveq	r3, #1
 8000fd6:	2300      	movne	r3, #0
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	461a      	mov	r2, r3
 8000fdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe0:	4889      	ldr	r0, [pc, #548]	; (8001208 <displayLedMatrix+0xbac>)
 8000fe2:	f000 ff15 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000fe6:	78fb      	ldrb	r3, [r7, #3]
 8000fe8:	085b      	lsrs	r3, r3, #1
 8000fea:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1 - (col & 1));
 8000fec:	78fb      	ldrb	r3, [r7, #3]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	bf0c      	ite	eq
 8000ff6:	2301      	moveq	r3, #1
 8000ff8:	2300      	movne	r3, #0
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001002:	4881      	ldr	r0, [pc, #516]	; (8001208 <displayLedMatrix+0xbac>)
 8001004:	f000 ff04 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	085b      	lsrs	r3, r3, #1
 800100c:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1 - (col & 1));
 800100e:	78fb      	ldrb	r3, [r7, #3]
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	2b00      	cmp	r3, #0
 8001016:	bf0c      	ite	eq
 8001018:	2301      	moveq	r3, #1
 800101a:	2300      	movne	r3, #0
 800101c:	b2db      	uxtb	r3, r3
 800101e:	461a      	mov	r2, r3
 8001020:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001024:	4878      	ldr	r0, [pc, #480]	; (8001208 <displayLedMatrix+0xbac>)
 8001026:	f000 fef3 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 800102a:	78fb      	ldrb	r3, [r7, #3]
 800102c:	085b      	lsrs	r3, r3, #1
 800102e:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1 - (col & 1));
 8001030:	78fb      	ldrb	r3, [r7, #3]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	2b00      	cmp	r3, #0
 8001038:	bf0c      	ite	eq
 800103a:	2301      	moveq	r3, #1
 800103c:	2300      	movne	r3, #0
 800103e:	b2db      	uxtb	r3, r3
 8001040:	461a      	mov	r2, r3
 8001042:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001046:	4870      	ldr	r0, [pc, #448]	; (8001208 <displayLedMatrix+0xbac>)
 8001048:	f000 fee2 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 800104c:	78fb      	ldrb	r3, [r7, #3]
 800104e:	085b      	lsrs	r3, r3, #1
 8001050:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1 - (col & 1));
 8001052:	78fb      	ldrb	r3, [r7, #3]
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	2b00      	cmp	r3, #0
 800105a:	bf0c      	ite	eq
 800105c:	2301      	moveq	r3, #1
 800105e:	2300      	movne	r3, #0
 8001060:	b2db      	uxtb	r3, r3
 8001062:	461a      	mov	r2, r3
 8001064:	2104      	movs	r1, #4
 8001066:	4868      	ldr	r0, [pc, #416]	; (8001208 <displayLedMatrix+0xbac>)
 8001068:	f000 fed2 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 800106c:	78fb      	ldrb	r3, [r7, #3]
 800106e:	085b      	lsrs	r3, r3, #1
 8001070:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin,  1 - (col & 1));
 8001072:	78fb      	ldrb	r3, [r7, #3]
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	2b00      	cmp	r3, #0
 800107a:	bf0c      	ite	eq
 800107c:	2301      	moveq	r3, #1
 800107e:	2300      	movne	r3, #0
 8001080:	b2db      	uxtb	r3, r3
 8001082:	461a      	mov	r2, r3
 8001084:	2102      	movs	r1, #2
 8001086:	4860      	ldr	r0, [pc, #384]	; (8001208 <displayLedMatrix+0xbac>)
 8001088:	f000 fec2 	bl	8001e10 <HAL_GPIO_WritePin>
		}
	if(row == 7) { // enable row 7
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b07      	cmp	r3, #7
 8001090:	f040 80b3 	bne.w	80011fa <displayLedMatrix+0xb9e>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 7180 	mov.w	r1, #256	; 0x100
 800109a:	485a      	ldr	r0, [pc, #360]	; (8001204 <displayLedMatrix+0xba8>)
 800109c:	f000 feb8 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 80010a0:	2201      	movs	r2, #1
 80010a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010a6:	4857      	ldr	r0, [pc, #348]	; (8001204 <displayLedMatrix+0xba8>)
 80010a8:	f000 feb2 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 80010ac:	2201      	movs	r2, #1
 80010ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010b2:	4854      	ldr	r0, [pc, #336]	; (8001204 <displayLedMatrix+0xba8>)
 80010b4:	f000 feac 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 80010b8:	2201      	movs	r2, #1
 80010ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010be:	4851      	ldr	r0, [pc, #324]	; (8001204 <displayLedMatrix+0xba8>)
 80010c0:	f000 fea6 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 80010c4:	2201      	movs	r2, #1
 80010c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ca:	484e      	ldr	r0, [pc, #312]	; (8001204 <displayLedMatrix+0xba8>)
 80010cc:	f000 fea0 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010d6:	484b      	ldr	r0, [pc, #300]	; (8001204 <displayLedMatrix+0xba8>)
 80010d8:	f000 fe9a 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010e2:	4848      	ldr	r0, [pc, #288]	; (8001204 <displayLedMatrix+0xba8>)
 80010e4:	f000 fe94 	bl	8001e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ee:	4845      	ldr	r0, [pc, #276]	; (8001204 <displayLedMatrix+0xba8>)
 80010f0:	f000 fe8e 	bl	8001e10 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1 - (col & 1));
 80010f4:	78fb      	ldrb	r3, [r7, #3]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	bf0c      	ite	eq
 80010fe:	2301      	moveq	r3, #1
 8001100:	2300      	movne	r3, #0
 8001102:	b2db      	uxtb	r3, r3
 8001104:	461a      	mov	r2, r3
 8001106:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800110a:	483f      	ldr	r0, [pc, #252]	; (8001208 <displayLedMatrix+0xbac>)
 800110c:	f000 fe80 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8001110:	78fb      	ldrb	r3, [r7, #3]
 8001112:	085b      	lsrs	r3, r3, #1
 8001114:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1 - (col & 1));
 8001116:	78fb      	ldrb	r3, [r7, #3]
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	2b00      	cmp	r3, #0
 800111e:	bf0c      	ite	eq
 8001120:	2301      	moveq	r3, #1
 8001122:	2300      	movne	r3, #0
 8001124:	b2db      	uxtb	r3, r3
 8001126:	461a      	mov	r2, r3
 8001128:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800112c:	4836      	ldr	r0, [pc, #216]	; (8001208 <displayLedMatrix+0xbac>)
 800112e:	f000 fe6f 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8001132:	78fb      	ldrb	r3, [r7, #3]
 8001134:	085b      	lsrs	r3, r3, #1
 8001136:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1 - (col & 1));
 8001138:	78fb      	ldrb	r3, [r7, #3]
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	2b00      	cmp	r3, #0
 8001140:	bf0c      	ite	eq
 8001142:	2301      	moveq	r3, #1
 8001144:	2300      	movne	r3, #0
 8001146:	b2db      	uxtb	r3, r3
 8001148:	461a      	mov	r2, r3
 800114a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800114e:	482e      	ldr	r0, [pc, #184]	; (8001208 <displayLedMatrix+0xbac>)
 8001150:	f000 fe5e 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8001154:	78fb      	ldrb	r3, [r7, #3]
 8001156:	085b      	lsrs	r3, r3, #1
 8001158:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1 - (col & 1));
 800115a:	78fb      	ldrb	r3, [r7, #3]
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	2b00      	cmp	r3, #0
 8001162:	bf0c      	ite	eq
 8001164:	2301      	moveq	r3, #1
 8001166:	2300      	movne	r3, #0
 8001168:	b2db      	uxtb	r3, r3
 800116a:	461a      	mov	r2, r3
 800116c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001170:	4825      	ldr	r0, [pc, #148]	; (8001208 <displayLedMatrix+0xbac>)
 8001172:	f000 fe4d 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8001176:	78fb      	ldrb	r3, [r7, #3]
 8001178:	085b      	lsrs	r3, r3, #1
 800117a:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1 - (col & 1));
 800117c:	78fb      	ldrb	r3, [r7, #3]
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	2b00      	cmp	r3, #0
 8001184:	bf0c      	ite	eq
 8001186:	2301      	moveq	r3, #1
 8001188:	2300      	movne	r3, #0
 800118a:	b2db      	uxtb	r3, r3
 800118c:	461a      	mov	r2, r3
 800118e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001192:	481d      	ldr	r0, [pc, #116]	; (8001208 <displayLedMatrix+0xbac>)
 8001194:	f000 fe3c 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 8001198:	78fb      	ldrb	r3, [r7, #3]
 800119a:	085b      	lsrs	r3, r3, #1
 800119c:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1 - (col & 1));
 800119e:	78fb      	ldrb	r3, [r7, #3]
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	bf0c      	ite	eq
 80011a8:	2301      	moveq	r3, #1
 80011aa:	2300      	movne	r3, #0
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	461a      	mov	r2, r3
 80011b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011b4:	4814      	ldr	r0, [pc, #80]	; (8001208 <displayLedMatrix+0xbac>)
 80011b6:	f000 fe2b 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 80011ba:	78fb      	ldrb	r3, [r7, #3]
 80011bc:	085b      	lsrs	r3, r3, #1
 80011be:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1 - (col & 1));
 80011c0:	78fb      	ldrb	r3, [r7, #3]
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	bf0c      	ite	eq
 80011ca:	2301      	moveq	r3, #1
 80011cc:	2300      	movne	r3, #0
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	461a      	mov	r2, r3
 80011d2:	2104      	movs	r1, #4
 80011d4:	480c      	ldr	r0, [pc, #48]	; (8001208 <displayLedMatrix+0xbac>)
 80011d6:	f000 fe1b 	bl	8001e10 <HAL_GPIO_WritePin>
			col = col >> 1;
 80011da:	78fb      	ldrb	r3, [r7, #3]
 80011dc:	085b      	lsrs	r3, r3, #1
 80011de:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin,  1 - (col & 1));
 80011e0:	78fb      	ldrb	r3, [r7, #3]
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	bf0c      	ite	eq
 80011ea:	2301      	moveq	r3, #1
 80011ec:	2300      	movne	r3, #0
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	461a      	mov	r2, r3
 80011f2:	2102      	movs	r1, #2
 80011f4:	4804      	ldr	r0, [pc, #16]	; (8001208 <displayLedMatrix+0xbac>)
 80011f6:	f000 fe0b 	bl	8001e10 <HAL_GPIO_WritePin>
		}

}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40010c00 	.word	0x40010c00
 8001208:	40010800 	.word	0x40010800

0800120c <updateLedMatrix>:

int MAX_LED_MATRIX = 8;
int index_led_matrix = 0;
uint8_t matrix_buffer[8] = {0x18,0x24,0x42,0x42,0x7e,0x42,0x42,0x42};
/*moi phan tu cua ma tran dai dien cho 1 row. VD: 0x18 doi ra nhi phan la 00011000 la row dau tien cua chu 'A', neu ket hop tat ca lai se thanh chu 'A'*/
void updateLedMatrix(int index) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b07      	cmp	r3, #7
 8001218:	d84c      	bhi.n	80012b4 <updateLedMatrix+0xa8>
 800121a:	a201      	add	r2, pc, #4	; (adr r2, 8001220 <updateLedMatrix+0x14>)
 800121c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001220:	08001241 	.word	0x08001241
 8001224:	08001253 	.word	0x08001253
 8001228:	08001261 	.word	0x08001261
 800122c:	0800126f 	.word	0x0800126f
 8001230:	0800127d 	.word	0x0800127d
 8001234:	0800128b 	.word	0x0800128b
 8001238:	08001299 	.word	0x08001299
 800123c:	080012a7 	.word	0x080012a7
	switch(index) {
	case 0:// display row 0 of led matrix
		displayLedMatrix(0, matrix_buffer [index]);
 8001240:	4a1f      	ldr	r2, [pc, #124]	; (80012c0 <updateLedMatrix+0xb4>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4619      	mov	r1, r3
 800124a:	2000      	movs	r0, #0
 800124c:	f7ff fa06 	bl	800065c <displayLedMatrix>
		break;
 8001250:	e031      	b.n	80012b6 <updateLedMatrix+0xaa>
	case 1:// display row 1 of led matrix
		displayLedMatrix(1, matrix_buffer[1]);
 8001252:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <updateLedMatrix+0xb4>)
 8001254:	785b      	ldrb	r3, [r3, #1]
 8001256:	4619      	mov	r1, r3
 8001258:	2001      	movs	r0, #1
 800125a:	f7ff f9ff 	bl	800065c <displayLedMatrix>
		break;
 800125e:	e02a      	b.n	80012b6 <updateLedMatrix+0xaa>
	case 2:// display row 2 of led matrix
		displayLedMatrix(2, matrix_buffer[2]);
 8001260:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <updateLedMatrix+0xb4>)
 8001262:	789b      	ldrb	r3, [r3, #2]
 8001264:	4619      	mov	r1, r3
 8001266:	2002      	movs	r0, #2
 8001268:	f7ff f9f8 	bl	800065c <displayLedMatrix>
		break;
 800126c:	e023      	b.n	80012b6 <updateLedMatrix+0xaa>
	case 3:// display row 3 of led matrix
		displayLedMatrix(3, matrix_buffer[3]);
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <updateLedMatrix+0xb4>)
 8001270:	78db      	ldrb	r3, [r3, #3]
 8001272:	4619      	mov	r1, r3
 8001274:	2003      	movs	r0, #3
 8001276:	f7ff f9f1 	bl	800065c <displayLedMatrix>
		break;
 800127a:	e01c      	b.n	80012b6 <updateLedMatrix+0xaa>
	case 4:// display row 4 of led matrix
		displayLedMatrix(4, matrix_buffer[4]);
 800127c:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <updateLedMatrix+0xb4>)
 800127e:	791b      	ldrb	r3, [r3, #4]
 8001280:	4619      	mov	r1, r3
 8001282:	2004      	movs	r0, #4
 8001284:	f7ff f9ea 	bl	800065c <displayLedMatrix>
		break;
 8001288:	e015      	b.n	80012b6 <updateLedMatrix+0xaa>
	case 5:// display row 5 of led matrix
		displayLedMatrix(5, matrix_buffer[5]);
 800128a:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <updateLedMatrix+0xb4>)
 800128c:	795b      	ldrb	r3, [r3, #5]
 800128e:	4619      	mov	r1, r3
 8001290:	2005      	movs	r0, #5
 8001292:	f7ff f9e3 	bl	800065c <displayLedMatrix>
		break;
 8001296:	e00e      	b.n	80012b6 <updateLedMatrix+0xaa>
	case 6:// display row 6 of led matrix
		displayLedMatrix(6, matrix_buffer[6]);
 8001298:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <updateLedMatrix+0xb4>)
 800129a:	799b      	ldrb	r3, [r3, #6]
 800129c:	4619      	mov	r1, r3
 800129e:	2006      	movs	r0, #6
 80012a0:	f7ff f9dc 	bl	800065c <displayLedMatrix>
		break;
 80012a4:	e007      	b.n	80012b6 <updateLedMatrix+0xaa>
	case 7:// display row 7 of led matrix
		displayLedMatrix(7, matrix_buffer[7]);
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <updateLedMatrix+0xb4>)
 80012a8:	79db      	ldrb	r3, [r3, #7]
 80012aa:	4619      	mov	r1, r3
 80012ac:	2007      	movs	r0, #7
 80012ae:	f7ff f9d5 	bl	800065c <displayLedMatrix>
		break;
 80012b2:	e000      	b.n	80012b6 <updateLedMatrix+0xaa>
	default:
		break;
 80012b4:	bf00      	nop
	}

}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000024 	.word	0x20000024

080012c4 <updateMatrix_buffer>:

void updateMatrix_buffer(){
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
	    matrix_buffer[0] = (matrix_buffer[0] << 1|matrix_buffer[0] >> 7);
 80012c8:	4b39      	ldr	r3, [pc, #228]	; (80013b0 <updateMatrix_buffer+0xec>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	b25a      	sxtb	r2, r3
 80012d0:	4b37      	ldr	r3, [pc, #220]	; (80013b0 <updateMatrix_buffer+0xec>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	09db      	lsrs	r3, r3, #7
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	b25b      	sxtb	r3, r3
 80012da:	4313      	orrs	r3, r2
 80012dc:	b25b      	sxtb	r3, r3
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	4b33      	ldr	r3, [pc, #204]	; (80013b0 <updateMatrix_buffer+0xec>)
 80012e2:	701a      	strb	r2, [r3, #0]
		matrix_buffer[1] = (matrix_buffer[1] << 1|matrix_buffer[1] >> 7);
 80012e4:	4b32      	ldr	r3, [pc, #200]	; (80013b0 <updateMatrix_buffer+0xec>)
 80012e6:	785b      	ldrb	r3, [r3, #1]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	b25a      	sxtb	r2, r3
 80012ec:	4b30      	ldr	r3, [pc, #192]	; (80013b0 <updateMatrix_buffer+0xec>)
 80012ee:	785b      	ldrb	r3, [r3, #1]
 80012f0:	09db      	lsrs	r3, r3, #7
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	b25b      	sxtb	r3, r3
 80012f6:	4313      	orrs	r3, r2
 80012f8:	b25b      	sxtb	r3, r3
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	4b2c      	ldr	r3, [pc, #176]	; (80013b0 <updateMatrix_buffer+0xec>)
 80012fe:	705a      	strb	r2, [r3, #1]
		matrix_buffer[2] = (matrix_buffer[2] << 1|matrix_buffer[2] >> 7);
 8001300:	4b2b      	ldr	r3, [pc, #172]	; (80013b0 <updateMatrix_buffer+0xec>)
 8001302:	789b      	ldrb	r3, [r3, #2]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	b25a      	sxtb	r2, r3
 8001308:	4b29      	ldr	r3, [pc, #164]	; (80013b0 <updateMatrix_buffer+0xec>)
 800130a:	789b      	ldrb	r3, [r3, #2]
 800130c:	09db      	lsrs	r3, r3, #7
 800130e:	b2db      	uxtb	r3, r3
 8001310:	b25b      	sxtb	r3, r3
 8001312:	4313      	orrs	r3, r2
 8001314:	b25b      	sxtb	r3, r3
 8001316:	b2da      	uxtb	r2, r3
 8001318:	4b25      	ldr	r3, [pc, #148]	; (80013b0 <updateMatrix_buffer+0xec>)
 800131a:	709a      	strb	r2, [r3, #2]
		matrix_buffer[3] = (matrix_buffer[3] << 1|matrix_buffer[3] >> 7);
 800131c:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <updateMatrix_buffer+0xec>)
 800131e:	78db      	ldrb	r3, [r3, #3]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	b25a      	sxtb	r2, r3
 8001324:	4b22      	ldr	r3, [pc, #136]	; (80013b0 <updateMatrix_buffer+0xec>)
 8001326:	78db      	ldrb	r3, [r3, #3]
 8001328:	09db      	lsrs	r3, r3, #7
 800132a:	b2db      	uxtb	r3, r3
 800132c:	b25b      	sxtb	r3, r3
 800132e:	4313      	orrs	r3, r2
 8001330:	b25b      	sxtb	r3, r3
 8001332:	b2da      	uxtb	r2, r3
 8001334:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <updateMatrix_buffer+0xec>)
 8001336:	70da      	strb	r2, [r3, #3]
		matrix_buffer[4] = (matrix_buffer[4] << 1|matrix_buffer[4] >> 7);
 8001338:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <updateMatrix_buffer+0xec>)
 800133a:	791b      	ldrb	r3, [r3, #4]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	b25a      	sxtb	r2, r3
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <updateMatrix_buffer+0xec>)
 8001342:	791b      	ldrb	r3, [r3, #4]
 8001344:	09db      	lsrs	r3, r3, #7
 8001346:	b2db      	uxtb	r3, r3
 8001348:	b25b      	sxtb	r3, r3
 800134a:	4313      	orrs	r3, r2
 800134c:	b25b      	sxtb	r3, r3
 800134e:	b2da      	uxtb	r2, r3
 8001350:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <updateMatrix_buffer+0xec>)
 8001352:	711a      	strb	r2, [r3, #4]
		matrix_buffer[5] = (matrix_buffer[5] << 1|matrix_buffer[5] >> 7);
 8001354:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <updateMatrix_buffer+0xec>)
 8001356:	795b      	ldrb	r3, [r3, #5]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	b25a      	sxtb	r2, r3
 800135c:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <updateMatrix_buffer+0xec>)
 800135e:	795b      	ldrb	r3, [r3, #5]
 8001360:	09db      	lsrs	r3, r3, #7
 8001362:	b2db      	uxtb	r3, r3
 8001364:	b25b      	sxtb	r3, r3
 8001366:	4313      	orrs	r3, r2
 8001368:	b25b      	sxtb	r3, r3
 800136a:	b2da      	uxtb	r2, r3
 800136c:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <updateMatrix_buffer+0xec>)
 800136e:	715a      	strb	r2, [r3, #5]
		matrix_buffer[6] = (matrix_buffer[6] << 1|matrix_buffer[6] >> 7);
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <updateMatrix_buffer+0xec>)
 8001372:	799b      	ldrb	r3, [r3, #6]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	b25a      	sxtb	r2, r3
 8001378:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <updateMatrix_buffer+0xec>)
 800137a:	799b      	ldrb	r3, [r3, #6]
 800137c:	09db      	lsrs	r3, r3, #7
 800137e:	b2db      	uxtb	r3, r3
 8001380:	b25b      	sxtb	r3, r3
 8001382:	4313      	orrs	r3, r2
 8001384:	b25b      	sxtb	r3, r3
 8001386:	b2da      	uxtb	r2, r3
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <updateMatrix_buffer+0xec>)
 800138a:	719a      	strb	r2, [r3, #6]
		matrix_buffer[7] = (matrix_buffer[7] << 1|matrix_buffer[7] >> 7);
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <updateMatrix_buffer+0xec>)
 800138e:	79db      	ldrb	r3, [r3, #7]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	b25a      	sxtb	r2, r3
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <updateMatrix_buffer+0xec>)
 8001396:	79db      	ldrb	r3, [r3, #7]
 8001398:	09db      	lsrs	r3, r3, #7
 800139a:	b2db      	uxtb	r3, r3
 800139c:	b25b      	sxtb	r3, r3
 800139e:	4313      	orrs	r3, r2
 80013a0:	b25b      	sxtb	r3, r3
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	4b02      	ldr	r3, [pc, #8]	; (80013b0 <updateMatrix_buffer+0xec>)
 80013a6:	71da      	strb	r2, [r3, #7]
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	20000024 	.word	0x20000024

080013b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ba:	f000 fa3f 	bl	800183c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013be:	f000 f89b 	bl	80014f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c2:	f000 f921 	bl	8001608 <MX_GPIO_Init>
  MX_TIM2_Init();
 80013c6:	f000 f8d3 	bl	8001570 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 80013ca:	4840      	ldr	r0, [pc, #256]	; (80014cc <main+0x118>)
 80013cc:	f001 f97e 	bl	80026cc <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  	//Set timer for 7ledSeg
    setTimer0(100);
 80013d0:	2064      	movs	r0, #100	; 0x64
 80013d2:	f7fe febb 	bl	800014c <setTimer0>
    //Set timer for DOT
    setTimer1(100);
 80013d6:	2064      	movs	r0, #100	; 0x64
 80013d8:	f7fe fed2 	bl	8000180 <setTimer1>
    //Set timer for led matrix
    setTimer2(100);
 80013dc:	2064      	movs	r0, #100	; 0x64
 80013de:	f7fe fee9 	bl	80001b4 <setTimer2>
    setTimer3(800);
 80013e2:	f44f 7048 	mov.w	r0, #800	; 0x320
 80013e6:	f7fe feff 	bl	80001e8 <setTimer3>
    int index_led = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
    while (1)
    {
    	if(timer0_flag==1){
 80013ee:	4b38      	ldr	r3, [pc, #224]	; (80014d0 <main+0x11c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d134      	bne.n	8001460 <main+0xac>
    	  		  setTimer0(1000);
 80013f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013fa:	f7fe fea7 	bl	800014c <setTimer0>
    	  		  second++;
 80013fe:	4b35      	ldr	r3, [pc, #212]	; (80014d4 <main+0x120>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	3301      	adds	r3, #1
 8001404:	4a33      	ldr	r2, [pc, #204]	; (80014d4 <main+0x120>)
 8001406:	6013      	str	r3, [r2, #0]
    	  		  if ( second >= 60) {
 8001408:	4b32      	ldr	r3, [pc, #200]	; (80014d4 <main+0x120>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b3b      	cmp	r3, #59	; 0x3b
 800140e:	dd07      	ble.n	8001420 <main+0x6c>
    	  			  second = 0;
 8001410:	4b30      	ldr	r3, [pc, #192]	; (80014d4 <main+0x120>)
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
    	  			  minute ++;
 8001416:	4b30      	ldr	r3, [pc, #192]	; (80014d8 <main+0x124>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	3301      	adds	r3, #1
 800141c:	4a2e      	ldr	r2, [pc, #184]	; (80014d8 <main+0x124>)
 800141e:	6013      	str	r3, [r2, #0]
    	  		  }
    	  		  if( minute >= 60) {
 8001420:	4b2d      	ldr	r3, [pc, #180]	; (80014d8 <main+0x124>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b3b      	cmp	r3, #59	; 0x3b
 8001426:	dd07      	ble.n	8001438 <main+0x84>
    	  			  minute = 0;
 8001428:	4b2b      	ldr	r3, [pc, #172]	; (80014d8 <main+0x124>)
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
    	  			  hour ++;
 800142e:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <main+0x128>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	3301      	adds	r3, #1
 8001434:	4a29      	ldr	r2, [pc, #164]	; (80014dc <main+0x128>)
 8001436:	6013      	str	r3, [r2, #0]
    	  		  }
    	  		  if( hour >=24) {
 8001438:	4b28      	ldr	r3, [pc, #160]	; (80014dc <main+0x128>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b17      	cmp	r3, #23
 800143e:	dd02      	ble.n	8001446 <main+0x92>
    	  			  hour = 0;
 8001440:	4b26      	ldr	r3, [pc, #152]	; (80014dc <main+0x128>)
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
    	  		  }
    	  		  updateClockBuffer();
 8001446:	f7ff f8c9 	bl	80005dc <updateClockBuffer>
    	  		  update7SEG(index_led);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff f830 	bl	80004b0 <update7SEG>
    	  		  index_led++;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3301      	adds	r3, #1
 8001454:	607b      	str	r3, [r7, #4]
    	  		  if(index_led >= 4) index_led = 0;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b03      	cmp	r3, #3
 800145a:	dd01      	ble.n	8001460 <main+0xac>
 800145c:	2300      	movs	r3, #0
 800145e:	607b      	str	r3, [r7, #4]
    	  }
    	  if(timer1_flag == 1){
 8001460:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <main+0x12c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d10b      	bne.n	8001480 <main+0xcc>
    		  	  setTimer1(1000);
 8001468:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800146c:	f7fe fe88 	bl	8000180 <setTimer1>
    		  	  HAL_GPIO_TogglePin(DOT_GPIO_Port, DOT_Pin);
 8001470:	2110      	movs	r1, #16
 8001472:	481c      	ldr	r0, [pc, #112]	; (80014e4 <main+0x130>)
 8001474:	f000 fce4 	bl	8001e40 <HAL_GPIO_TogglePin>
    		  	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001478:	2120      	movs	r1, #32
 800147a:	481a      	ldr	r0, [pc, #104]	; (80014e4 <main+0x130>)
 800147c:	f000 fce0 	bl	8001e40 <HAL_GPIO_TogglePin>
    	  }
    	  if(timer2_flag == 1){
 8001480:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <main+0x134>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d115      	bne.n	80014b4 <main+0x100>
    		  	  setTimer2(100);
 8001488:	2064      	movs	r0, #100	; 0x64
 800148a:	f7fe fe93 	bl	80001b4 <setTimer2>
    		  	  updateLedMatrix(index_led_matrix);
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <main+0x138>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff feba 	bl	800120c <updateLedMatrix>
    		  	  index_led_matrix ++;
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <main+0x138>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	3301      	adds	r3, #1
 800149e:	4a13      	ldr	r2, [pc, #76]	; (80014ec <main+0x138>)
 80014a0:	6013      	str	r3, [r2, #0]
    		  	  if(index_led_matrix == MAX_LED_MATRIX) index_led_matrix = 0;
 80014a2:	4b12      	ldr	r3, [pc, #72]	; (80014ec <main+0x138>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <main+0x13c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d102      	bne.n	80014b4 <main+0x100>
 80014ae:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <main+0x138>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
    	  }
    	  if(timer3_flag == 1 )// control animation led matrix
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <main+0x140>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d198      	bne.n	80013ee <main+0x3a>
    	  {
    	  		    updateMatrix_buffer();
 80014bc:	f7ff ff02 	bl	80012c4 <updateMatrix_buffer>
    	  			setTimer3(800);
 80014c0:	f44f 7048 	mov.w	r0, #800	; 0x320
 80014c4:	f7fe fe90 	bl	80001e8 <setTimer3>
    	if(timer0_flag==1){
 80014c8:	e791      	b.n	80013ee <main+0x3a>
 80014ca:	bf00      	nop
 80014cc:	20000078 	.word	0x20000078
 80014d0:	20000058 	.word	0x20000058
 80014d4:	20000008 	.word	0x20000008
 80014d8:	20000004 	.word	0x20000004
 80014dc:	20000000 	.word	0x20000000
 80014e0:	20000060 	.word	0x20000060
 80014e4:	40010800 	.word	0x40010800
 80014e8:	20000068 	.word	0x20000068
 80014ec:	20000074 	.word	0x20000074
 80014f0:	20000020 	.word	0x20000020
 80014f4:	20000070 	.word	0x20000070

080014f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b090      	sub	sp, #64	; 0x40
 80014fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fe:	f107 0318 	add.w	r3, r7, #24
 8001502:	2228      	movs	r2, #40	; 0x28
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f001 fc9c 	bl	8002e44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800151a:	2302      	movs	r3, #2
 800151c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800151e:	2301      	movs	r3, #1
 8001520:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001522:	2310      	movs	r3, #16
 8001524:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001526:	2300      	movs	r3, #0
 8001528:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800152a:	f107 0318 	add.w	r3, r7, #24
 800152e:	4618      	mov	r0, r3
 8001530:	f000 fca0 	bl	8001e74 <HAL_RCC_OscConfig>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800153a:	f000 f8c5 	bl	80016c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800153e:	230f      	movs	r3, #15
 8001540:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	2100      	movs	r1, #0
 8001556:	4618      	mov	r0, r3
 8001558:	f000 ff0c 	bl	8002374 <HAL_RCC_ClockConfig>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001562:	f000 f8b1 	bl	80016c8 <Error_Handler>
  }
}
 8001566:	bf00      	nop
 8001568:	3740      	adds	r7, #64	; 0x40
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001584:	463b      	mov	r3, r7
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800158c:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <MX_TIM2_Init+0x94>)
 800158e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001592:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <MX_TIM2_Init+0x94>)
 8001596:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800159a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159c:	4b19      	ldr	r3, [pc, #100]	; (8001604 <MX_TIM2_Init+0x94>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80015a2:	4b18      	ldr	r3, [pc, #96]	; (8001604 <MX_TIM2_Init+0x94>)
 80015a4:	2209      	movs	r2, #9
 80015a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a8:	4b16      	ldr	r3, [pc, #88]	; (8001604 <MX_TIM2_Init+0x94>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <MX_TIM2_Init+0x94>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015b4:	4813      	ldr	r0, [pc, #76]	; (8001604 <MX_TIM2_Init+0x94>)
 80015b6:	f001 f839 	bl	800262c <HAL_TIM_Base_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015c0:	f000 f882 	bl	80016c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015ca:	f107 0308 	add.w	r3, r7, #8
 80015ce:	4619      	mov	r1, r3
 80015d0:	480c      	ldr	r0, [pc, #48]	; (8001604 <MX_TIM2_Init+0x94>)
 80015d2:	f001 f9cf 	bl	8002974 <HAL_TIM_ConfigClockSource>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015dc:	f000 f874 	bl	80016c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e0:	2300      	movs	r3, #0
 80015e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015e8:	463b      	mov	r3, r7
 80015ea:	4619      	mov	r1, r3
 80015ec:	4805      	ldr	r0, [pc, #20]	; (8001604 <MX_TIM2_Init+0x94>)
 80015ee:	f001 fb9b 	bl	8002d28 <HAL_TIMEx_MasterConfigSynchronization>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015f8:	f000 f866 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015fc:	bf00      	nop
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000078 	.word	0x20000078

08001608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160e:	f107 0308 	add.w	r3, r7, #8
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161c:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <MX_GPIO_Init+0xa0>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	4a21      	ldr	r2, [pc, #132]	; (80016a8 <MX_GPIO_Init+0xa0>)
 8001622:	f043 0304 	orr.w	r3, r3, #4
 8001626:	6193      	str	r3, [r2, #24]
 8001628:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <MX_GPIO_Init+0xa0>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001634:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <MX_GPIO_Init+0xa0>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	4a1b      	ldr	r2, [pc, #108]	; (80016a8 <MX_GPIO_Init+0xa0>)
 800163a:	f043 0308 	orr.w	r3, r3, #8
 800163e:	6193      	str	r3, [r2, #24]
 8001640:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <MX_GPIO_Init+0xa0>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	f003 0308 	and.w	r3, r3, #8
 8001648:	603b      	str	r3, [r7, #0]
 800164a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 800164c:	2200      	movs	r2, #0
 800164e:	f64f 31f6 	movw	r1, #64502	; 0xfbf6
 8001652:	4816      	ldr	r0, [pc, #88]	; (80016ac <MX_GPIO_Init+0xa4>)
 8001654:	f000 fbdc 	bl	8001e10 <HAL_GPIO_WritePin>
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM3_Pin|ENM4_Pin|ENM5_Pin|ENM6_Pin
                          |ENM7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|ROW2_Pin
 8001658:	2200      	movs	r2, #0
 800165a:	f64f 717f 	movw	r1, #65407	; 0xff7f
 800165e:	4814      	ldr	r0, [pc, #80]	; (80016b0 <MX_GPIO_Init+0xa8>)
 8001660:	f000 fbd6 	bl	8001e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENM0_Pin ENM1_Pin DOT_Pin LED_RED_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           ENM3_Pin ENM4_Pin ENM5_Pin ENM6_Pin
                           ENM7_Pin */
  GPIO_InitStruct.Pin = ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 8001664:	f64f 33f6 	movw	r3, #64502	; 0xfbf6
 8001668:	60bb      	str	r3, [r7, #8]
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM3_Pin|ENM4_Pin|ENM5_Pin|ENM6_Pin
                          |ENM7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166a:	2301      	movs	r3, #1
 800166c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001672:	2302      	movs	r3, #2
 8001674:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001676:	f107 0308 	add.w	r3, r7, #8
 800167a:	4619      	mov	r1, r3
 800167c:	480b      	ldr	r0, [pc, #44]	; (80016ac <MX_GPIO_Init+0xa4>)
 800167e:	f000 fa4d 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 ROW2_Pin
                           ROW3_Pin ROW4_Pin ROW5_Pin ROW6_Pin
                           ROW7_Pin PB3 PB4 PB5
                           PB6 ROW0_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|ROW2_Pin
 8001682:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8001686:	60bb      	str	r3, [r7, #8]
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|ROW0_Pin|ROW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001688:	2301      	movs	r3, #1
 800168a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2302      	movs	r3, #2
 8001692:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001694:	f107 0308 	add.w	r3, r7, #8
 8001698:	4619      	mov	r1, r3
 800169a:	4805      	ldr	r0, [pc, #20]	; (80016b0 <MX_GPIO_Init+0xa8>)
 800169c:	f000 fa3e 	bl	8001b1c <HAL_GPIO_Init>
//  GPIO_InitStruct.Pin = ENM2_Pin;
//  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  HAL_GPIO_Init(ENM2_GPIO_Port, &GPIO_InitStruct);

}
 80016a0:	bf00      	nop
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40010800 	.word	0x40010800
 80016b0:	40010c00 	.word	0x40010c00

080016b4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	timerRun();
 80016bc:	f7fe fdae 	bl	800021c <timerRun>

}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016cc:	b672      	cpsid	i
}
 80016ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <Error_Handler+0x8>
	...

080016d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <HAL_MspInit+0x5c>)
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	4a14      	ldr	r2, [pc, #80]	; (8001730 <HAL_MspInit+0x5c>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6193      	str	r3, [r2, #24]
 80016e6:	4b12      	ldr	r3, [pc, #72]	; (8001730 <HAL_MspInit+0x5c>)
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f2:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <HAL_MspInit+0x5c>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	4a0e      	ldr	r2, [pc, #56]	; (8001730 <HAL_MspInit+0x5c>)
 80016f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016fc:	61d3      	str	r3, [r2, #28]
 80016fe:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <HAL_MspInit+0x5c>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800170a:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <HAL_MspInit+0x60>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	4a04      	ldr	r2, [pc, #16]	; (8001734 <HAL_MspInit+0x60>)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001726:	bf00      	nop
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr
 8001730:	40021000 	.word	0x40021000
 8001734:	40010000 	.word	0x40010000

08001738 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001748:	d113      	bne.n	8001772 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800174a:	4b0c      	ldr	r3, [pc, #48]	; (800177c <HAL_TIM_Base_MspInit+0x44>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	4a0b      	ldr	r2, [pc, #44]	; (800177c <HAL_TIM_Base_MspInit+0x44>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	61d3      	str	r3, [r2, #28]
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <HAL_TIM_Base_MspInit+0x44>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2100      	movs	r1, #0
 8001766:	201c      	movs	r0, #28
 8001768:	f000 f9a1 	bl	8001aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800176c:	201c      	movs	r0, #28
 800176e:	f000 f9ba 	bl	8001ae6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000

08001780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001784:	e7fe      	b.n	8001784 <NMI_Handler+0x4>

08001786 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800178a:	e7fe      	b.n	800178a <HardFault_Handler+0x4>

0800178c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <MemManage_Handler+0x4>

08001792 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001796:	e7fe      	b.n	8001796 <BusFault_Handler+0x4>

08001798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800179c:	e7fe      	b.n	800179c <UsageFault_Handler+0x4>

0800179e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr

080017aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr

080017b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr

080017c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c6:	f000 f87f 	bl	80018c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017d4:	4802      	ldr	r0, [pc, #8]	; (80017e0 <TIM2_IRQHandler+0x10>)
 80017d6:	f000 ffc5 	bl	8002764 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000078 	.word	0x20000078

080017e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr

080017f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017f0:	f7ff fff8 	bl	80017e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017f4:	480b      	ldr	r0, [pc, #44]	; (8001824 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017f6:	490c      	ldr	r1, [pc, #48]	; (8001828 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017f8:	4a0c      	ldr	r2, [pc, #48]	; (800182c <LoopFillZerobss+0x16>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017fc:	e002      	b.n	8001804 <LoopCopyDataInit>

080017fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001802:	3304      	adds	r3, #4

08001804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001808:	d3f9      	bcc.n	80017fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180a:	4a09      	ldr	r2, [pc, #36]	; (8001830 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800180c:	4c09      	ldr	r4, [pc, #36]	; (8001834 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001810:	e001      	b.n	8001816 <LoopFillZerobss>

08001812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001814:	3204      	adds	r2, #4

08001816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001818:	d3fb      	bcc.n	8001812 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800181a:	f001 faef 	bl	8002dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800181e:	f7ff fdc9 	bl	80013b4 <main>
  bx lr
 8001822:	4770      	bx	lr
  ldr r0, =_sdata
 8001824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001828:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 800182c:	08002e98 	.word	0x08002e98
  ldr r2, =_sbss
 8001830:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8001834:	200000c4 	.word	0x200000c4

08001838 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001838:	e7fe      	b.n	8001838 <ADC1_2_IRQHandler>
	...

0800183c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <HAL_Init+0x28>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a07      	ldr	r2, [pc, #28]	; (8001864 <HAL_Init+0x28>)
 8001846:	f043 0310 	orr.w	r3, r3, #16
 800184a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800184c:	2003      	movs	r0, #3
 800184e:	f000 f923 	bl	8001a98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001852:	200f      	movs	r0, #15
 8001854:	f000 f808 	bl	8001868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001858:	f7ff ff3c 	bl	80016d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40022000 	.word	0x40022000

08001868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <HAL_InitTick+0x54>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <HAL_InitTick+0x58>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001882:	fbb2 f3f3 	udiv	r3, r2, r3
 8001886:	4618      	mov	r0, r3
 8001888:	f000 f93b 	bl	8001b02 <HAL_SYSTICK_Config>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e00e      	b.n	80018b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b0f      	cmp	r3, #15
 800189a:	d80a      	bhi.n	80018b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800189c:	2200      	movs	r2, #0
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	f04f 30ff 	mov.w	r0, #4294967295
 80018a4:	f000 f903 	bl	8001aae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a8:	4a06      	ldr	r2, [pc, #24]	; (80018c4 <HAL_InitTick+0x5c>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e000      	b.n	80018b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	2000002c 	.word	0x2000002c
 80018c0:	20000034 	.word	0x20000034
 80018c4:	20000030 	.word	0x20000030

080018c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <HAL_IncTick+0x1c>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <HAL_IncTick+0x20>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4413      	add	r3, r2
 80018d8:	4a03      	ldr	r2, [pc, #12]	; (80018e8 <HAL_IncTick+0x20>)
 80018da:	6013      	str	r3, [r2, #0]
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	20000034 	.word	0x20000034
 80018e8:	200000c0 	.word	0x200000c0

080018ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return uwTick;
 80018f0:	4b02      	ldr	r3, [pc, #8]	; (80018fc <HAL_GetTick+0x10>)
 80018f2:	681b      	ldr	r3, [r3, #0]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr
 80018fc:	200000c0 	.word	0x200000c0

08001900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800191c:	4013      	ands	r3, r2
 800191e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800192c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001932:	4a04      	ldr	r2, [pc, #16]	; (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	60d3      	str	r3, [r2, #12]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800194c:	4b04      	ldr	r3, [pc, #16]	; (8001960 <__NVIC_GetPriorityGrouping+0x18>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	0a1b      	lsrs	r3, r3, #8
 8001952:	f003 0307 	and.w	r3, r3, #7
}
 8001956:	4618      	mov	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	2b00      	cmp	r3, #0
 8001974:	db0b      	blt.n	800198e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	f003 021f 	and.w	r2, r3, #31
 800197c:	4906      	ldr	r1, [pc, #24]	; (8001998 <__NVIC_EnableIRQ+0x34>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	095b      	lsrs	r3, r3, #5
 8001984:	2001      	movs	r0, #1
 8001986:	fa00 f202 	lsl.w	r2, r0, r2
 800198a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr
 8001998:	e000e100 	.word	0xe000e100

0800199c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	6039      	str	r1, [r7, #0]
 80019a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	db0a      	blt.n	80019c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	490c      	ldr	r1, [pc, #48]	; (80019e8 <__NVIC_SetPriority+0x4c>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	0112      	lsls	r2, r2, #4
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	440b      	add	r3, r1
 80019c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c4:	e00a      	b.n	80019dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4908      	ldr	r1, [pc, #32]	; (80019ec <__NVIC_SetPriority+0x50>)
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	3b04      	subs	r3, #4
 80019d4:	0112      	lsls	r2, r2, #4
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	440b      	add	r3, r1
 80019da:	761a      	strb	r2, [r3, #24]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000e100 	.word	0xe000e100
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	; 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f1c3 0307 	rsb	r3, r3, #7
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	bf28      	it	cs
 8001a0e:	2304      	movcs	r3, #4
 8001a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3304      	adds	r3, #4
 8001a16:	2b06      	cmp	r3, #6
 8001a18:	d902      	bls.n	8001a20 <NVIC_EncodePriority+0x30>
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3b03      	subs	r3, #3
 8001a1e:	e000      	b.n	8001a22 <NVIC_EncodePriority+0x32>
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	f04f 32ff 	mov.w	r2, #4294967295
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	401a      	ands	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a38:	f04f 31ff 	mov.w	r1, #4294967295
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	43d9      	mvns	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	4313      	orrs	r3, r2
         );
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3724      	adds	r7, #36	; 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr

08001a54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a64:	d301      	bcc.n	8001a6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a66:	2301      	movs	r3, #1
 8001a68:	e00f      	b.n	8001a8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <SysTick_Config+0x40>)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a72:	210f      	movs	r1, #15
 8001a74:	f04f 30ff 	mov.w	r0, #4294967295
 8001a78:	f7ff ff90 	bl	800199c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <SysTick_Config+0x40>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a82:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <SysTick_Config+0x40>)
 8001a84:	2207      	movs	r2, #7
 8001a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	e000e010 	.word	0xe000e010

08001a98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff ff2d 	bl	8001900 <__NVIC_SetPriorityGrouping>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
 8001aba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac0:	f7ff ff42 	bl	8001948 <__NVIC_GetPriorityGrouping>
 8001ac4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	6978      	ldr	r0, [r7, #20]
 8001acc:	f7ff ff90 	bl	80019f0 <NVIC_EncodePriority>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff5f 	bl	800199c <__NVIC_SetPriority>
}
 8001ade:	bf00      	nop
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	4603      	mov	r3, r0
 8001aee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff35 	bl	8001964 <__NVIC_EnableIRQ>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ffa2 	bl	8001a54 <SysTick_Config>
 8001b10:	4603      	mov	r3, r0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b08b      	sub	sp, #44	; 0x2c
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b2e:	e148      	b.n	8001dc2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b30:	2201      	movs	r2, #1
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	69fa      	ldr	r2, [r7, #28]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	f040 8137 	bne.w	8001dbc <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	4aa3      	ldr	r2, [pc, #652]	; (8001de0 <HAL_GPIO_Init+0x2c4>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d05e      	beq.n	8001c16 <HAL_GPIO_Init+0xfa>
 8001b58:	4aa1      	ldr	r2, [pc, #644]	; (8001de0 <HAL_GPIO_Init+0x2c4>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d875      	bhi.n	8001c4a <HAL_GPIO_Init+0x12e>
 8001b5e:	4aa1      	ldr	r2, [pc, #644]	; (8001de4 <HAL_GPIO_Init+0x2c8>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d058      	beq.n	8001c16 <HAL_GPIO_Init+0xfa>
 8001b64:	4a9f      	ldr	r2, [pc, #636]	; (8001de4 <HAL_GPIO_Init+0x2c8>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d86f      	bhi.n	8001c4a <HAL_GPIO_Init+0x12e>
 8001b6a:	4a9f      	ldr	r2, [pc, #636]	; (8001de8 <HAL_GPIO_Init+0x2cc>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d052      	beq.n	8001c16 <HAL_GPIO_Init+0xfa>
 8001b70:	4a9d      	ldr	r2, [pc, #628]	; (8001de8 <HAL_GPIO_Init+0x2cc>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d869      	bhi.n	8001c4a <HAL_GPIO_Init+0x12e>
 8001b76:	4a9d      	ldr	r2, [pc, #628]	; (8001dec <HAL_GPIO_Init+0x2d0>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d04c      	beq.n	8001c16 <HAL_GPIO_Init+0xfa>
 8001b7c:	4a9b      	ldr	r2, [pc, #620]	; (8001dec <HAL_GPIO_Init+0x2d0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d863      	bhi.n	8001c4a <HAL_GPIO_Init+0x12e>
 8001b82:	4a9b      	ldr	r2, [pc, #620]	; (8001df0 <HAL_GPIO_Init+0x2d4>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d046      	beq.n	8001c16 <HAL_GPIO_Init+0xfa>
 8001b88:	4a99      	ldr	r2, [pc, #612]	; (8001df0 <HAL_GPIO_Init+0x2d4>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d85d      	bhi.n	8001c4a <HAL_GPIO_Init+0x12e>
 8001b8e:	2b12      	cmp	r3, #18
 8001b90:	d82a      	bhi.n	8001be8 <HAL_GPIO_Init+0xcc>
 8001b92:	2b12      	cmp	r3, #18
 8001b94:	d859      	bhi.n	8001c4a <HAL_GPIO_Init+0x12e>
 8001b96:	a201      	add	r2, pc, #4	; (adr r2, 8001b9c <HAL_GPIO_Init+0x80>)
 8001b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b9c:	08001c17 	.word	0x08001c17
 8001ba0:	08001bf1 	.word	0x08001bf1
 8001ba4:	08001c03 	.word	0x08001c03
 8001ba8:	08001c45 	.word	0x08001c45
 8001bac:	08001c4b 	.word	0x08001c4b
 8001bb0:	08001c4b 	.word	0x08001c4b
 8001bb4:	08001c4b 	.word	0x08001c4b
 8001bb8:	08001c4b 	.word	0x08001c4b
 8001bbc:	08001c4b 	.word	0x08001c4b
 8001bc0:	08001c4b 	.word	0x08001c4b
 8001bc4:	08001c4b 	.word	0x08001c4b
 8001bc8:	08001c4b 	.word	0x08001c4b
 8001bcc:	08001c4b 	.word	0x08001c4b
 8001bd0:	08001c4b 	.word	0x08001c4b
 8001bd4:	08001c4b 	.word	0x08001c4b
 8001bd8:	08001c4b 	.word	0x08001c4b
 8001bdc:	08001c4b 	.word	0x08001c4b
 8001be0:	08001bf9 	.word	0x08001bf9
 8001be4:	08001c0d 	.word	0x08001c0d
 8001be8:	4a82      	ldr	r2, [pc, #520]	; (8001df4 <HAL_GPIO_Init+0x2d8>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d013      	beq.n	8001c16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bee:	e02c      	b.n	8001c4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	623b      	str	r3, [r7, #32]
          break;
 8001bf6:	e029      	b.n	8001c4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	623b      	str	r3, [r7, #32]
          break;
 8001c00:	e024      	b.n	8001c4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	3308      	adds	r3, #8
 8001c08:	623b      	str	r3, [r7, #32]
          break;
 8001c0a:	e01f      	b.n	8001c4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	330c      	adds	r3, #12
 8001c12:	623b      	str	r3, [r7, #32]
          break;
 8001c14:	e01a      	b.n	8001c4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d102      	bne.n	8001c24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c1e:	2304      	movs	r3, #4
 8001c20:	623b      	str	r3, [r7, #32]
          break;
 8001c22:	e013      	b.n	8001c4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d105      	bne.n	8001c38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c2c:	2308      	movs	r3, #8
 8001c2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69fa      	ldr	r2, [r7, #28]
 8001c34:	611a      	str	r2, [r3, #16]
          break;
 8001c36:	e009      	b.n	8001c4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c38:	2308      	movs	r3, #8
 8001c3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	69fa      	ldr	r2, [r7, #28]
 8001c40:	615a      	str	r2, [r3, #20]
          break;
 8001c42:	e003      	b.n	8001c4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c44:	2300      	movs	r3, #0
 8001c46:	623b      	str	r3, [r7, #32]
          break;
 8001c48:	e000      	b.n	8001c4c <HAL_GPIO_Init+0x130>
          break;
 8001c4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	2bff      	cmp	r3, #255	; 0xff
 8001c50:	d801      	bhi.n	8001c56 <HAL_GPIO_Init+0x13a>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	e001      	b.n	8001c5a <HAL_GPIO_Init+0x13e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3304      	adds	r3, #4
 8001c5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	2bff      	cmp	r3, #255	; 0xff
 8001c60:	d802      	bhi.n	8001c68 <HAL_GPIO_Init+0x14c>
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	e002      	b.n	8001c6e <HAL_GPIO_Init+0x152>
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	3b08      	subs	r3, #8
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	210f      	movs	r1, #15
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	401a      	ands	r2, r3
 8001c80:	6a39      	ldr	r1, [r7, #32]
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	fa01 f303 	lsl.w	r3, r1, r3
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 8090 	beq.w	8001dbc <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c9c:	4b56      	ldr	r3, [pc, #344]	; (8001df8 <HAL_GPIO_Init+0x2dc>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	4a55      	ldr	r2, [pc, #340]	; (8001df8 <HAL_GPIO_Init+0x2dc>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	6193      	str	r3, [r2, #24]
 8001ca8:	4b53      	ldr	r3, [pc, #332]	; (8001df8 <HAL_GPIO_Init+0x2dc>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cb4:	4a51      	ldr	r2, [pc, #324]	; (8001dfc <HAL_GPIO_Init+0x2e0>)
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	089b      	lsrs	r3, r3, #2
 8001cba:	3302      	adds	r3, #2
 8001cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	220f      	movs	r2, #15
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a49      	ldr	r2, [pc, #292]	; (8001e00 <HAL_GPIO_Init+0x2e4>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d00d      	beq.n	8001cfc <HAL_GPIO_Init+0x1e0>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a48      	ldr	r2, [pc, #288]	; (8001e04 <HAL_GPIO_Init+0x2e8>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d007      	beq.n	8001cf8 <HAL_GPIO_Init+0x1dc>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a47      	ldr	r2, [pc, #284]	; (8001e08 <HAL_GPIO_Init+0x2ec>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d101      	bne.n	8001cf4 <HAL_GPIO_Init+0x1d8>
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	e004      	b.n	8001cfe <HAL_GPIO_Init+0x1e2>
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e002      	b.n	8001cfe <HAL_GPIO_Init+0x1e2>
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e000      	b.n	8001cfe <HAL_GPIO_Init+0x1e2>
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d00:	f002 0203 	and.w	r2, r2, #3
 8001d04:	0092      	lsls	r2, r2, #2
 8001d06:	4093      	lsls	r3, r2
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d0e:	493b      	ldr	r1, [pc, #236]	; (8001dfc <HAL_GPIO_Init+0x2e0>)
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	089b      	lsrs	r3, r3, #2
 8001d14:	3302      	adds	r3, #2
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d006      	beq.n	8001d36 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d28:	4b38      	ldr	r3, [pc, #224]	; (8001e0c <HAL_GPIO_Init+0x2f0>)
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	4937      	ldr	r1, [pc, #220]	; (8001e0c <HAL_GPIO_Init+0x2f0>)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	608b      	str	r3, [r1, #8]
 8001d34:	e006      	b.n	8001d44 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d36:	4b35      	ldr	r3, [pc, #212]	; (8001e0c <HAL_GPIO_Init+0x2f0>)
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	4933      	ldr	r1, [pc, #204]	; (8001e0c <HAL_GPIO_Init+0x2f0>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d006      	beq.n	8001d5e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d50:	4b2e      	ldr	r3, [pc, #184]	; (8001e0c <HAL_GPIO_Init+0x2f0>)
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	492d      	ldr	r1, [pc, #180]	; (8001e0c <HAL_GPIO_Init+0x2f0>)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	60cb      	str	r3, [r1, #12]
 8001d5c:	e006      	b.n	8001d6c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d5e:	4b2b      	ldr	r3, [pc, #172]	; (8001e0c <HAL_GPIO_Init+0x2f0>)
 8001d60:	68da      	ldr	r2, [r3, #12]
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	4929      	ldr	r1, [pc, #164]	; (8001e0c <HAL_GPIO_Init+0x2f0>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d006      	beq.n	8001d86 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d78:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <HAL_GPIO_Init+0x2f0>)
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	4923      	ldr	r1, [pc, #140]	; (8001e0c <HAL_GPIO_Init+0x2f0>)
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	604b      	str	r3, [r1, #4]
 8001d84:	e006      	b.n	8001d94 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d86:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <HAL_GPIO_Init+0x2f0>)
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	491f      	ldr	r1, [pc, #124]	; (8001e0c <HAL_GPIO_Init+0x2f0>)
 8001d90:	4013      	ands	r3, r2
 8001d92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d006      	beq.n	8001dae <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001da0:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <HAL_GPIO_Init+0x2f0>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4919      	ldr	r1, [pc, #100]	; (8001e0c <HAL_GPIO_Init+0x2f0>)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	600b      	str	r3, [r1, #0]
 8001dac:	e006      	b.n	8001dbc <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dae:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <HAL_GPIO_Init+0x2f0>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	4915      	ldr	r1, [pc, #84]	; (8001e0c <HAL_GPIO_Init+0x2f0>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f47f aeaf 	bne.w	8001b30 <HAL_GPIO_Init+0x14>
  }
}
 8001dd2:	bf00      	nop
 8001dd4:	bf00      	nop
 8001dd6:	372c      	adds	r7, #44	; 0x2c
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	10320000 	.word	0x10320000
 8001de4:	10310000 	.word	0x10310000
 8001de8:	10220000 	.word	0x10220000
 8001dec:	10210000 	.word	0x10210000
 8001df0:	10120000 	.word	0x10120000
 8001df4:	10110000 	.word	0x10110000
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40010000 	.word	0x40010000
 8001e00:	40010800 	.word	0x40010800
 8001e04:	40010c00 	.word	0x40010c00
 8001e08:	40011000 	.word	0x40011000
 8001e0c:	40010400 	.word	0x40010400

08001e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	807b      	strh	r3, [r7, #2]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e20:	787b      	ldrb	r3, [r7, #1]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e26:	887a      	ldrh	r2, [r7, #2]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e2c:	e003      	b.n	8001e36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e2e:	887b      	ldrh	r3, [r7, #2]
 8001e30:	041a      	lsls	r2, r3, #16
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	611a      	str	r2, [r3, #16]
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e52:	887a      	ldrh	r2, [r7, #2]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4013      	ands	r3, r2
 8001e58:	041a      	lsls	r2, r3, #16
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	43d9      	mvns	r1, r3
 8001e5e:	887b      	ldrh	r3, [r7, #2]
 8001e60:	400b      	ands	r3, r1
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	611a      	str	r2, [r3, #16]
}
 8001e68:	bf00      	nop
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr
	...

08001e74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e26c      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 8087 	beq.w	8001fa2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e94:	4b92      	ldr	r3, [pc, #584]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 030c 	and.w	r3, r3, #12
 8001e9c:	2b04      	cmp	r3, #4
 8001e9e:	d00c      	beq.n	8001eba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ea0:	4b8f      	ldr	r3, [pc, #572]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 030c 	and.w	r3, r3, #12
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d112      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x5e>
 8001eac:	4b8c      	ldr	r3, [pc, #560]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb8:	d10b      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eba:	4b89      	ldr	r3, [pc, #548]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d06c      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x12c>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d168      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e246      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eda:	d106      	bne.n	8001eea <HAL_RCC_OscConfig+0x76>
 8001edc:	4b80      	ldr	r3, [pc, #512]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a7f      	ldr	r2, [pc, #508]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	e02e      	b.n	8001f48 <HAL_RCC_OscConfig+0xd4>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10c      	bne.n	8001f0c <HAL_RCC_OscConfig+0x98>
 8001ef2:	4b7b      	ldr	r3, [pc, #492]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a7a      	ldr	r2, [pc, #488]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	4b78      	ldr	r3, [pc, #480]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a77      	ldr	r2, [pc, #476]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	e01d      	b.n	8001f48 <HAL_RCC_OscConfig+0xd4>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f14:	d10c      	bne.n	8001f30 <HAL_RCC_OscConfig+0xbc>
 8001f16:	4b72      	ldr	r3, [pc, #456]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a71      	ldr	r2, [pc, #452]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	4b6f      	ldr	r3, [pc, #444]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a6e      	ldr	r2, [pc, #440]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	e00b      	b.n	8001f48 <HAL_RCC_OscConfig+0xd4>
 8001f30:	4b6b      	ldr	r3, [pc, #428]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a6a      	ldr	r2, [pc, #424]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b68      	ldr	r3, [pc, #416]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a67      	ldr	r2, [pc, #412]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d013      	beq.n	8001f78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f50:	f7ff fccc 	bl	80018ec <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f58:	f7ff fcc8 	bl	80018ec <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b64      	cmp	r3, #100	; 0x64
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e1fa      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6a:	4b5d      	ldr	r3, [pc, #372]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0xe4>
 8001f76:	e014      	b.n	8001fa2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7ff fcb8 	bl	80018ec <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f80:	f7ff fcb4 	bl	80018ec <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b64      	cmp	r3, #100	; 0x64
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e1e6      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f92:	4b53      	ldr	r3, [pc, #332]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x10c>
 8001f9e:	e000      	b.n	8001fa2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d063      	beq.n	8002076 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fae:	4b4c      	ldr	r3, [pc, #304]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00b      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fba:	4b49      	ldr	r3, [pc, #292]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	2b08      	cmp	r3, #8
 8001fc4:	d11c      	bne.n	8002000 <HAL_RCC_OscConfig+0x18c>
 8001fc6:	4b46      	ldr	r3, [pc, #280]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d116      	bne.n	8002000 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd2:	4b43      	ldr	r3, [pc, #268]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d005      	beq.n	8001fea <HAL_RCC_OscConfig+0x176>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d001      	beq.n	8001fea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e1ba      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fea:	4b3d      	ldr	r3, [pc, #244]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4939      	ldr	r1, [pc, #228]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffe:	e03a      	b.n	8002076 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d020      	beq.n	800204a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002008:	4b36      	ldr	r3, [pc, #216]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 800200a:	2201      	movs	r2, #1
 800200c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200e:	f7ff fc6d 	bl	80018ec <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002016:	f7ff fc69 	bl	80018ec <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e19b      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002028:	4b2d      	ldr	r3, [pc, #180]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0f0      	beq.n	8002016 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002034:	4b2a      	ldr	r3, [pc, #168]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4927      	ldr	r1, [pc, #156]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8002044:	4313      	orrs	r3, r2
 8002046:	600b      	str	r3, [r1, #0]
 8002048:	e015      	b.n	8002076 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800204a:	4b26      	ldr	r3, [pc, #152]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002050:	f7ff fc4c 	bl	80018ec <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002058:	f7ff fc48 	bl	80018ec <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e17a      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206a:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f0      	bne.n	8002058 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	2b00      	cmp	r3, #0
 8002080:	d03a      	beq.n	80020f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d019      	beq.n	80020be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800208a:	4b17      	ldr	r3, [pc, #92]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 800208c:	2201      	movs	r2, #1
 800208e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002090:	f7ff fc2c 	bl	80018ec <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002098:	f7ff fc28 	bl	80018ec <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e15a      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020aa:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020b6:	2001      	movs	r0, #1
 80020b8:	f000 fa9a 	bl	80025f0 <RCC_Delay>
 80020bc:	e01c      	b.n	80020f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020be:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c4:	f7ff fc12 	bl	80018ec <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ca:	e00f      	b.n	80020ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020cc:	f7ff fc0e 	bl	80018ec <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d908      	bls.n	80020ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e140      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
 80020de:	bf00      	nop
 80020e0:	40021000 	.word	0x40021000
 80020e4:	42420000 	.word	0x42420000
 80020e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ec:	4b9e      	ldr	r3, [pc, #632]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1e9      	bne.n	80020cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 80a6 	beq.w	8002252 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002106:	2300      	movs	r3, #0
 8002108:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800210a:	4b97      	ldr	r3, [pc, #604]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10d      	bne.n	8002132 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002116:	4b94      	ldr	r3, [pc, #592]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	4a93      	ldr	r2, [pc, #588]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 800211c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002120:	61d3      	str	r3, [r2, #28]
 8002122:	4b91      	ldr	r3, [pc, #580]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800212e:	2301      	movs	r3, #1
 8002130:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002132:	4b8e      	ldr	r3, [pc, #568]	; (800236c <HAL_RCC_OscConfig+0x4f8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213a:	2b00      	cmp	r3, #0
 800213c:	d118      	bne.n	8002170 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800213e:	4b8b      	ldr	r3, [pc, #556]	; (800236c <HAL_RCC_OscConfig+0x4f8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a8a      	ldr	r2, [pc, #552]	; (800236c <HAL_RCC_OscConfig+0x4f8>)
 8002144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800214a:	f7ff fbcf 	bl	80018ec <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002152:	f7ff fbcb 	bl	80018ec <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b64      	cmp	r3, #100	; 0x64
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e0fd      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002164:	4b81      	ldr	r3, [pc, #516]	; (800236c <HAL_RCC_OscConfig+0x4f8>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f0      	beq.n	8002152 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d106      	bne.n	8002186 <HAL_RCC_OscConfig+0x312>
 8002178:	4b7b      	ldr	r3, [pc, #492]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	4a7a      	ldr	r2, [pc, #488]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	6213      	str	r3, [r2, #32]
 8002184:	e02d      	b.n	80021e2 <HAL_RCC_OscConfig+0x36e>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10c      	bne.n	80021a8 <HAL_RCC_OscConfig+0x334>
 800218e:	4b76      	ldr	r3, [pc, #472]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	4a75      	ldr	r2, [pc, #468]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 8002194:	f023 0301 	bic.w	r3, r3, #1
 8002198:	6213      	str	r3, [r2, #32]
 800219a:	4b73      	ldr	r3, [pc, #460]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	4a72      	ldr	r2, [pc, #456]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80021a0:	f023 0304 	bic.w	r3, r3, #4
 80021a4:	6213      	str	r3, [r2, #32]
 80021a6:	e01c      	b.n	80021e2 <HAL_RCC_OscConfig+0x36e>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	2b05      	cmp	r3, #5
 80021ae:	d10c      	bne.n	80021ca <HAL_RCC_OscConfig+0x356>
 80021b0:	4b6d      	ldr	r3, [pc, #436]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	4a6c      	ldr	r2, [pc, #432]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80021b6:	f043 0304 	orr.w	r3, r3, #4
 80021ba:	6213      	str	r3, [r2, #32]
 80021bc:	4b6a      	ldr	r3, [pc, #424]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	4a69      	ldr	r2, [pc, #420]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	6213      	str	r3, [r2, #32]
 80021c8:	e00b      	b.n	80021e2 <HAL_RCC_OscConfig+0x36e>
 80021ca:	4b67      	ldr	r3, [pc, #412]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	4a66      	ldr	r2, [pc, #408]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80021d0:	f023 0301 	bic.w	r3, r3, #1
 80021d4:	6213      	str	r3, [r2, #32]
 80021d6:	4b64      	ldr	r3, [pc, #400]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	4a63      	ldr	r2, [pc, #396]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80021dc:	f023 0304 	bic.w	r3, r3, #4
 80021e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d015      	beq.n	8002216 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ea:	f7ff fb7f 	bl	80018ec <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f0:	e00a      	b.n	8002208 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f2:	f7ff fb7b 	bl	80018ec <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002200:	4293      	cmp	r3, r2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e0ab      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002208:	4b57      	ldr	r3, [pc, #348]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0ee      	beq.n	80021f2 <HAL_RCC_OscConfig+0x37e>
 8002214:	e014      	b.n	8002240 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002216:	f7ff fb69 	bl	80018ec <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800221c:	e00a      	b.n	8002234 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800221e:	f7ff fb65 	bl	80018ec <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	f241 3288 	movw	r2, #5000	; 0x1388
 800222c:	4293      	cmp	r3, r2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e095      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002234:	4b4c      	ldr	r3, [pc, #304]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1ee      	bne.n	800221e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002240:	7dfb      	ldrb	r3, [r7, #23]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d105      	bne.n	8002252 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002246:	4b48      	ldr	r3, [pc, #288]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	4a47      	ldr	r2, [pc, #284]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 800224c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002250:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 8081 	beq.w	800235e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800225c:	4b42      	ldr	r3, [pc, #264]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 030c 	and.w	r3, r3, #12
 8002264:	2b08      	cmp	r3, #8
 8002266:	d061      	beq.n	800232c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	2b02      	cmp	r3, #2
 800226e:	d146      	bne.n	80022fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002270:	4b3f      	ldr	r3, [pc, #252]	; (8002370 <HAL_RCC_OscConfig+0x4fc>)
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002276:	f7ff fb39 	bl	80018ec <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227e:	f7ff fb35 	bl	80018ec <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e067      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002290:	4b35      	ldr	r3, [pc, #212]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1f0      	bne.n	800227e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a4:	d108      	bne.n	80022b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022a6:	4b30      	ldr	r3, [pc, #192]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	492d      	ldr	r1, [pc, #180]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022b8:	4b2b      	ldr	r3, [pc, #172]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a19      	ldr	r1, [r3, #32]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	430b      	orrs	r3, r1
 80022ca:	4927      	ldr	r1, [pc, #156]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d0:	4b27      	ldr	r3, [pc, #156]	; (8002370 <HAL_RCC_OscConfig+0x4fc>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d6:	f7ff fb09 	bl	80018ec <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022de:	f7ff fb05 	bl	80018ec <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e037      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022f0:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0x46a>
 80022fc:	e02f      	b.n	800235e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fe:	4b1c      	ldr	r3, [pc, #112]	; (8002370 <HAL_RCC_OscConfig+0x4fc>)
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002304:	f7ff faf2 	bl	80018ec <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800230c:	f7ff faee 	bl	80018ec <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e020      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800231e:	4b12      	ldr	r3, [pc, #72]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0x498>
 800232a:	e018      	b.n	800235e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e013      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002338:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	429a      	cmp	r2, r3
 800234a:	d106      	bne.n	800235a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002356:	429a      	cmp	r2, r3
 8002358:	d001      	beq.n	800235e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40021000 	.word	0x40021000
 800236c:	40007000 	.word	0x40007000
 8002370:	42420060 	.word	0x42420060

08002374 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0d0      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002388:	4b6a      	ldr	r3, [pc, #424]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d910      	bls.n	80023b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002396:	4b67      	ldr	r3, [pc, #412]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 0207 	bic.w	r2, r3, #7
 800239e:	4965      	ldr	r1, [pc, #404]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a6:	4b63      	ldr	r3, [pc, #396]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d001      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0b8      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d020      	beq.n	8002406 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023d0:	4b59      	ldr	r3, [pc, #356]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4a58      	ldr	r2, [pc, #352]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80023d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023e8:	4b53      	ldr	r3, [pc, #332]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	4a52      	ldr	r2, [pc, #328]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80023ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f4:	4b50      	ldr	r3, [pc, #320]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	494d      	ldr	r1, [pc, #308]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002402:	4313      	orrs	r3, r2
 8002404:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d040      	beq.n	8002494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d107      	bne.n	800242a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241a:	4b47      	ldr	r3, [pc, #284]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d115      	bne.n	8002452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e07f      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d107      	bne.n	8002442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002432:	4b41      	ldr	r3, [pc, #260]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d109      	bne.n	8002452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e073      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002442:	4b3d      	ldr	r3, [pc, #244]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e06b      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002452:	4b39      	ldr	r3, [pc, #228]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f023 0203 	bic.w	r2, r3, #3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	4936      	ldr	r1, [pc, #216]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002460:	4313      	orrs	r3, r2
 8002462:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002464:	f7ff fa42 	bl	80018ec <HAL_GetTick>
 8002468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246a:	e00a      	b.n	8002482 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246c:	f7ff fa3e 	bl	80018ec <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	f241 3288 	movw	r2, #5000	; 0x1388
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e053      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002482:	4b2d      	ldr	r3, [pc, #180]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 020c 	and.w	r2, r3, #12
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	429a      	cmp	r2, r3
 8002492:	d1eb      	bne.n	800246c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002494:	4b27      	ldr	r3, [pc, #156]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d210      	bcs.n	80024c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a2:	4b24      	ldr	r3, [pc, #144]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f023 0207 	bic.w	r2, r3, #7
 80024aa:	4922      	ldr	r1, [pc, #136]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b2:	4b20      	ldr	r3, [pc, #128]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d001      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e032      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d008      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024d0:	4b19      	ldr	r3, [pc, #100]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	4916      	ldr	r1, [pc, #88]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d009      	beq.n	8002502 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024ee:	4b12      	ldr	r3, [pc, #72]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	490e      	ldr	r1, [pc, #56]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002502:	f000 f821 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8002506:	4602      	mov	r2, r0
 8002508:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	091b      	lsrs	r3, r3, #4
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	490a      	ldr	r1, [pc, #40]	; (800253c <HAL_RCC_ClockConfig+0x1c8>)
 8002514:	5ccb      	ldrb	r3, [r1, r3]
 8002516:	fa22 f303 	lsr.w	r3, r2, r3
 800251a:	4a09      	ldr	r2, [pc, #36]	; (8002540 <HAL_RCC_ClockConfig+0x1cc>)
 800251c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800251e:	4b09      	ldr	r3, [pc, #36]	; (8002544 <HAL_RCC_ClockConfig+0x1d0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff f9a0 	bl	8001868 <HAL_InitTick>

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40022000 	.word	0x40022000
 8002538:	40021000 	.word	0x40021000
 800253c:	08002e6c 	.word	0x08002e6c
 8002540:	2000002c 	.word	0x2000002c
 8002544:	20000030 	.word	0x20000030

08002548 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002548:	b480      	push	{r7}
 800254a:	b087      	sub	sp, #28
 800254c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	2300      	movs	r3, #0
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	2300      	movs	r3, #0
 800255c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800255e:	2300      	movs	r3, #0
 8002560:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002562:	4b1e      	ldr	r3, [pc, #120]	; (80025dc <HAL_RCC_GetSysClockFreq+0x94>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b04      	cmp	r3, #4
 8002570:	d002      	beq.n	8002578 <HAL_RCC_GetSysClockFreq+0x30>
 8002572:	2b08      	cmp	r3, #8
 8002574:	d003      	beq.n	800257e <HAL_RCC_GetSysClockFreq+0x36>
 8002576:	e027      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002578:	4b19      	ldr	r3, [pc, #100]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800257a:	613b      	str	r3, [r7, #16]
      break;
 800257c:	e027      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	0c9b      	lsrs	r3, r3, #18
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	4a17      	ldr	r2, [pc, #92]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002588:	5cd3      	ldrb	r3, [r2, r3]
 800258a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d010      	beq.n	80025b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002596:	4b11      	ldr	r3, [pc, #68]	; (80025dc <HAL_RCC_GetSysClockFreq+0x94>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	0c5b      	lsrs	r3, r3, #17
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	4a11      	ldr	r2, [pc, #68]	; (80025e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025a2:	5cd3      	ldrb	r3, [r2, r3]
 80025a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a0d      	ldr	r2, [pc, #52]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80025aa:	fb02 f203 	mul.w	r2, r2, r3
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b4:	617b      	str	r3, [r7, #20]
 80025b6:	e004      	b.n	80025c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a0c      	ldr	r2, [pc, #48]	; (80025ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80025bc:	fb02 f303 	mul.w	r3, r2, r3
 80025c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	613b      	str	r3, [r7, #16]
      break;
 80025c6:	e002      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ca:	613b      	str	r3, [r7, #16]
      break;
 80025cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ce:	693b      	ldr	r3, [r7, #16]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	371c      	adds	r7, #28
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	40021000 	.word	0x40021000
 80025e0:	007a1200 	.word	0x007a1200
 80025e4:	08002e7c 	.word	0x08002e7c
 80025e8:	08002e8c 	.word	0x08002e8c
 80025ec:	003d0900 	.word	0x003d0900

080025f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025f8:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <RCC_Delay+0x34>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a0a      	ldr	r2, [pc, #40]	; (8002628 <RCC_Delay+0x38>)
 80025fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002602:	0a5b      	lsrs	r3, r3, #9
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	fb02 f303 	mul.w	r3, r2, r3
 800260a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800260c:	bf00      	nop
  }
  while (Delay --);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	1e5a      	subs	r2, r3, #1
 8002612:	60fa      	str	r2, [r7, #12]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1f9      	bne.n	800260c <RCC_Delay+0x1c>
}
 8002618:	bf00      	nop
 800261a:	bf00      	nop
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr
 8002624:	2000002c 	.word	0x2000002c
 8002628:	10624dd3 	.word	0x10624dd3

0800262c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e041      	b.n	80026c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d106      	bne.n	8002658 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff f870 	bl	8001738 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2202      	movs	r2, #2
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3304      	adds	r3, #4
 8002668:	4619      	mov	r1, r3
 800266a:	4610      	mov	r0, r2
 800266c:	f000 fa6e 	bl	8002b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d001      	beq.n	80026e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e035      	b.n	8002750 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f042 0201 	orr.w	r2, r2, #1
 80026fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a16      	ldr	r2, [pc, #88]	; (800275c <HAL_TIM_Base_Start_IT+0x90>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d009      	beq.n	800271a <HAL_TIM_Base_Start_IT+0x4e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800270e:	d004      	beq.n	800271a <HAL_TIM_Base_Start_IT+0x4e>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a12      	ldr	r2, [pc, #72]	; (8002760 <HAL_TIM_Base_Start_IT+0x94>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d111      	bne.n	800273e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2b06      	cmp	r3, #6
 800272a:	d010      	beq.n	800274e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0201 	orr.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800273c:	e007      	b.n	800274e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f042 0201 	orr.w	r2, r2, #1
 800274c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40012c00 	.word	0x40012c00
 8002760:	40000400 	.word	0x40000400

08002764 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b02      	cmp	r3, #2
 8002778:	d122      	bne.n	80027c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b02      	cmp	r3, #2
 8002786:	d11b      	bne.n	80027c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f06f 0202 	mvn.w	r2, #2
 8002790:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f9b4 	bl	8002b14 <HAL_TIM_IC_CaptureCallback>
 80027ac:	e005      	b.n	80027ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f9a7 	bl	8002b02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f9b6 	bl	8002b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d122      	bne.n	8002814 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d11b      	bne.n	8002814 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f06f 0204 	mvn.w	r2, #4
 80027e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2202      	movs	r2, #2
 80027ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f98a 	bl	8002b14 <HAL_TIM_IC_CaptureCallback>
 8002800:	e005      	b.n	800280e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f97d 	bl	8002b02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f98c 	bl	8002b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b08      	cmp	r3, #8
 8002820:	d122      	bne.n	8002868 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	2b08      	cmp	r3, #8
 800282e:	d11b      	bne.n	8002868 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f06f 0208 	mvn.w	r2, #8
 8002838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2204      	movs	r2, #4
 800283e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f960 	bl	8002b14 <HAL_TIM_IC_CaptureCallback>
 8002854:	e005      	b.n	8002862 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f953 	bl	8002b02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f962 	bl	8002b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f003 0310 	and.w	r3, r3, #16
 8002872:	2b10      	cmp	r3, #16
 8002874:	d122      	bne.n	80028bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 0310 	and.w	r3, r3, #16
 8002880:	2b10      	cmp	r3, #16
 8002882:	d11b      	bne.n	80028bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f06f 0210 	mvn.w	r2, #16
 800288c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2208      	movs	r2, #8
 8002892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f936 	bl	8002b14 <HAL_TIM_IC_CaptureCallback>
 80028a8:	e005      	b.n	80028b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f929 	bl	8002b02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f938 	bl	8002b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d10e      	bne.n	80028e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d107      	bne.n	80028e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f06f 0201 	mvn.w	r2, #1
 80028e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7fe fee6 	bl	80016b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f2:	2b80      	cmp	r3, #128	; 0x80
 80028f4:	d10e      	bne.n	8002914 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002900:	2b80      	cmp	r3, #128	; 0x80
 8002902:	d107      	bne.n	8002914 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800290c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 fa6b 	bl	8002dea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291e:	2b40      	cmp	r3, #64	; 0x40
 8002920:	d10e      	bne.n	8002940 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292c:	2b40      	cmp	r3, #64	; 0x40
 800292e:	d107      	bne.n	8002940 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f8fc 	bl	8002b38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	f003 0320 	and.w	r3, r3, #32
 800294a:	2b20      	cmp	r3, #32
 800294c:	d10e      	bne.n	800296c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f003 0320 	and.w	r3, r3, #32
 8002958:	2b20      	cmp	r3, #32
 800295a:	d107      	bne.n	800296c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f06f 0220 	mvn.w	r2, #32
 8002964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 fa36 	bl	8002dd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800296c:	bf00      	nop
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002988:	2b01      	cmp	r3, #1
 800298a:	d101      	bne.n	8002990 <HAL_TIM_ConfigClockSource+0x1c>
 800298c:	2302      	movs	r3, #2
 800298e:	e0b4      	b.n	8002afa <HAL_TIM_ConfigClockSource+0x186>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029c8:	d03e      	beq.n	8002a48 <HAL_TIM_ConfigClockSource+0xd4>
 80029ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ce:	f200 8087 	bhi.w	8002ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80029d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d6:	f000 8086 	beq.w	8002ae6 <HAL_TIM_ConfigClockSource+0x172>
 80029da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029de:	d87f      	bhi.n	8002ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80029e0:	2b70      	cmp	r3, #112	; 0x70
 80029e2:	d01a      	beq.n	8002a1a <HAL_TIM_ConfigClockSource+0xa6>
 80029e4:	2b70      	cmp	r3, #112	; 0x70
 80029e6:	d87b      	bhi.n	8002ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80029e8:	2b60      	cmp	r3, #96	; 0x60
 80029ea:	d050      	beq.n	8002a8e <HAL_TIM_ConfigClockSource+0x11a>
 80029ec:	2b60      	cmp	r3, #96	; 0x60
 80029ee:	d877      	bhi.n	8002ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80029f0:	2b50      	cmp	r3, #80	; 0x50
 80029f2:	d03c      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0xfa>
 80029f4:	2b50      	cmp	r3, #80	; 0x50
 80029f6:	d873      	bhi.n	8002ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80029f8:	2b40      	cmp	r3, #64	; 0x40
 80029fa:	d058      	beq.n	8002aae <HAL_TIM_ConfigClockSource+0x13a>
 80029fc:	2b40      	cmp	r3, #64	; 0x40
 80029fe:	d86f      	bhi.n	8002ae0 <HAL_TIM_ConfigClockSource+0x16c>
 8002a00:	2b30      	cmp	r3, #48	; 0x30
 8002a02:	d064      	beq.n	8002ace <HAL_TIM_ConfigClockSource+0x15a>
 8002a04:	2b30      	cmp	r3, #48	; 0x30
 8002a06:	d86b      	bhi.n	8002ae0 <HAL_TIM_ConfigClockSource+0x16c>
 8002a08:	2b20      	cmp	r3, #32
 8002a0a:	d060      	beq.n	8002ace <HAL_TIM_ConfigClockSource+0x15a>
 8002a0c:	2b20      	cmp	r3, #32
 8002a0e:	d867      	bhi.n	8002ae0 <HAL_TIM_ConfigClockSource+0x16c>
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d05c      	beq.n	8002ace <HAL_TIM_ConfigClockSource+0x15a>
 8002a14:	2b10      	cmp	r3, #16
 8002a16:	d05a      	beq.n	8002ace <HAL_TIM_ConfigClockSource+0x15a>
 8002a18:	e062      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6818      	ldr	r0, [r3, #0]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	6899      	ldr	r1, [r3, #8]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f000 f95e 	bl	8002cea <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	609a      	str	r2, [r3, #8]
      break;
 8002a46:	e04f      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6818      	ldr	r0, [r3, #0]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	6899      	ldr	r1, [r3, #8]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f000 f947 	bl	8002cea <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689a      	ldr	r2, [r3, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a6a:	609a      	str	r2, [r3, #8]
      break;
 8002a6c:	e03c      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6818      	ldr	r0, [r3, #0]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	6859      	ldr	r1, [r3, #4]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f000 f8be 	bl	8002bfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2150      	movs	r1, #80	; 0x50
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 f915 	bl	8002cb6 <TIM_ITRx_SetConfig>
      break;
 8002a8c:	e02c      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6818      	ldr	r0, [r3, #0]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	6859      	ldr	r1, [r3, #4]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	f000 f8dc 	bl	8002c58 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2160      	movs	r1, #96	; 0x60
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 f905 	bl	8002cb6 <TIM_ITRx_SetConfig>
      break;
 8002aac:	e01c      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6818      	ldr	r0, [r3, #0]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	6859      	ldr	r1, [r3, #4]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	461a      	mov	r2, r3
 8002abc:	f000 f89e 	bl	8002bfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2140      	movs	r1, #64	; 0x40
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 f8f5 	bl	8002cb6 <TIM_ITRx_SetConfig>
      break;
 8002acc:	e00c      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4610      	mov	r0, r2
 8002ada:	f000 f8ec 	bl	8002cb6 <TIM_ITRx_SetConfig>
      break;
 8002ade:	e003      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae4:	e000      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ae6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr

08002b14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr

08002b26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr

08002b38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr
	...

08002b4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a25      	ldr	r2, [pc, #148]	; (8002bf4 <TIM_Base_SetConfig+0xa8>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d007      	beq.n	8002b74 <TIM_Base_SetConfig+0x28>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b6a:	d003      	beq.n	8002b74 <TIM_Base_SetConfig+0x28>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a22      	ldr	r2, [pc, #136]	; (8002bf8 <TIM_Base_SetConfig+0xac>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d108      	bne.n	8002b86 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a1a      	ldr	r2, [pc, #104]	; (8002bf4 <TIM_Base_SetConfig+0xa8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d007      	beq.n	8002b9e <TIM_Base_SetConfig+0x52>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b94:	d003      	beq.n	8002b9e <TIM_Base_SetConfig+0x52>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a17      	ldr	r2, [pc, #92]	; (8002bf8 <TIM_Base_SetConfig+0xac>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d108      	bne.n	8002bb0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ba4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a07      	ldr	r2, [pc, #28]	; (8002bf4 <TIM_Base_SetConfig+0xa8>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d103      	bne.n	8002be4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	691a      	ldr	r2, [r3, #16]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	615a      	str	r2, [r3, #20]
}
 8002bea:	bf00      	nop
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr
 8002bf4:	40012c00 	.word	0x40012c00
 8002bf8:	40000400 	.word	0x40000400

08002bfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b087      	sub	sp, #28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	f023 0201 	bic.w	r2, r3, #1
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f023 030a 	bic.w	r3, r3, #10
 8002c38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	621a      	str	r2, [r3, #32]
}
 8002c4e:	bf00      	nop
 8002c50:	371c      	adds	r7, #28
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr

08002c58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	f023 0210 	bic.w	r2, r3, #16
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	031b      	lsls	r3, r3, #12
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c94:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	621a      	str	r2, [r3, #32]
}
 8002cac:	bf00      	nop
 8002cae:	371c      	adds	r7, #28
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr

08002cb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b085      	sub	sp, #20
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
 8002cbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ccc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f043 0307 	orr.w	r3, r3, #7
 8002cd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	609a      	str	r2, [r3, #8]
}
 8002ce0:	bf00      	nop
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr

08002cea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b087      	sub	sp, #28
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	607a      	str	r2, [r7, #4]
 8002cf6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d04:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	021a      	lsls	r2, r3, #8
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	609a      	str	r2, [r3, #8]
}
 8002d1e:	bf00      	nop
 8002d20:	371c      	adds	r7, #28
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr

08002d28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e041      	b.n	8002dc4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a14      	ldr	r2, [pc, #80]	; (8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d009      	beq.n	8002d98 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d8c:	d004      	beq.n	8002d98 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a10      	ldr	r2, [pc, #64]	; (8002dd4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d10c      	bne.n	8002db2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40012c00 	.word	0x40012c00
 8002dd4:	40000400 	.word	0x40000400

08002dd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bc80      	pop	{r7}
 8002de8:	4770      	bx	lr

08002dea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr

08002dfc <__libc_init_array>:
 8002dfc:	b570      	push	{r4, r5, r6, lr}
 8002dfe:	2600      	movs	r6, #0
 8002e00:	4d0c      	ldr	r5, [pc, #48]	; (8002e34 <__libc_init_array+0x38>)
 8002e02:	4c0d      	ldr	r4, [pc, #52]	; (8002e38 <__libc_init_array+0x3c>)
 8002e04:	1b64      	subs	r4, r4, r5
 8002e06:	10a4      	asrs	r4, r4, #2
 8002e08:	42a6      	cmp	r6, r4
 8002e0a:	d109      	bne.n	8002e20 <__libc_init_array+0x24>
 8002e0c:	f000 f822 	bl	8002e54 <_init>
 8002e10:	2600      	movs	r6, #0
 8002e12:	4d0a      	ldr	r5, [pc, #40]	; (8002e3c <__libc_init_array+0x40>)
 8002e14:	4c0a      	ldr	r4, [pc, #40]	; (8002e40 <__libc_init_array+0x44>)
 8002e16:	1b64      	subs	r4, r4, r5
 8002e18:	10a4      	asrs	r4, r4, #2
 8002e1a:	42a6      	cmp	r6, r4
 8002e1c:	d105      	bne.n	8002e2a <__libc_init_array+0x2e>
 8002e1e:	bd70      	pop	{r4, r5, r6, pc}
 8002e20:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e24:	4798      	blx	r3
 8002e26:	3601      	adds	r6, #1
 8002e28:	e7ee      	b.n	8002e08 <__libc_init_array+0xc>
 8002e2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e2e:	4798      	blx	r3
 8002e30:	3601      	adds	r6, #1
 8002e32:	e7f2      	b.n	8002e1a <__libc_init_array+0x1e>
 8002e34:	08002e90 	.word	0x08002e90
 8002e38:	08002e90 	.word	0x08002e90
 8002e3c:	08002e90 	.word	0x08002e90
 8002e40:	08002e94 	.word	0x08002e94

08002e44 <memset>:
 8002e44:	4603      	mov	r3, r0
 8002e46:	4402      	add	r2, r0
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d100      	bne.n	8002e4e <memset+0xa>
 8002e4c:	4770      	bx	lr
 8002e4e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e52:	e7f9      	b.n	8002e48 <memset+0x4>

08002e54 <_init>:
 8002e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e56:	bf00      	nop
 8002e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e5a:	bc08      	pop	{r3}
 8002e5c:	469e      	mov	lr, r3
 8002e5e:	4770      	bx	lr

08002e60 <_fini>:
 8002e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e62:	bf00      	nop
 8002e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e66:	bc08      	pop	{r3}
 8002e68:	469e      	mov	lr, r3
 8002e6a:	4770      	bx	lr
